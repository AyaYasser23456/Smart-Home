
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028a  00800060  00002548  000025dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008002ea  008002ea  00002866  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002898  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005af1  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a5  00000000  00000000  00008865  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b3c  00000000  00000000  00009f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000948  00000000  00000000  0000ca48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee9  00000000  00000000  0000d390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032e2  00000000  00000000  0000e279  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0001155b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	07 06       	cpc	r0, r23
      56:	13 07       	cpc	r17, r19
      58:	a3 07       	cpc	r26, r19
      5a:	fb 05       	cpc	r31, r11
      5c:	fb 05       	cpc	r31, r11
      5e:	8e 07       	cpc	r24, r30
      60:	fb 05       	cpc	r31, r11
      62:	fb 05       	cpc	r31, r11
      64:	fb 05       	cpc	r31, r11
      66:	fb 05       	cpc	r31, r11
      68:	fb 05       	cpc	r31, r11
      6a:	fb 05       	cpc	r31, r11
      6c:	fb 05       	cpc	r31, r11
      6e:	fb 05       	cpc	r31, r11
      70:	fb 05       	cpc	r31, r11
      72:	fb 05       	cpc	r31, r11
      74:	fb 05       	cpc	r31, r11
      76:	fb 05       	cpc	r31, r11
      78:	fb 05       	cpc	r31, r11
      7a:	fb 05       	cpc	r31, r11
      7c:	fb 05       	cpc	r31, r11
      7e:	fb 05       	cpc	r31, r11
      80:	fb 05       	cpc	r31, r11
      82:	fb 05       	cpc	r31, r11
      84:	fb 05       	cpc	r31, r11
      86:	fb 05       	cpc	r31, r11
      88:	fb 05       	cpc	r31, r11
      8a:	fb 05       	cpc	r31, r11
      8c:	fb 05       	cpc	r31, r11
      8e:	fb 05       	cpc	r31, r11
      90:	fb 05       	cpc	r31, r11
      92:	fb 05       	cpc	r31, r11
      94:	fb 05       	cpc	r31, r11
      96:	fb 05       	cpc	r31, r11
      98:	fb 05       	cpc	r31, r11
      9a:	fb 05       	cpc	r31, r11
      9c:	fb 05       	cpc	r31, r11
      9e:	fb 05       	cpc	r31, r11
      a0:	fb 05       	cpc	r31, r11
      a2:	fb 05       	cpc	r31, r11
      a4:	fb 05       	cpc	r31, r11
      a6:	fb 05       	cpc	r31, r11
      a8:	fb 05       	cpc	r31, r11
      aa:	fb 05       	cpc	r31, r11
      ac:	fb 05       	cpc	r31, r11
      ae:	fb 05       	cpc	r31, r11
      b0:	fb 05       	cpc	r31, r11
      b2:	fb 05       	cpc	r31, r11
      b4:	0d 06       	cpc	r0, r29
      b6:	36 06       	cpc	r3, r22
      b8:	af 06       	cpc	r10, r31
      ba:	21 07       	cpc	r18, r17
      bc:	26 07       	cpc	r18, r22
      be:	4b 07       	cpc	r20, r27
      c0:	6f 07       	cpc	r22, r31
      c2:	fb 05       	cpc	r31, r11
      c4:	fb 05       	cpc	r31, r11
      c6:	fb 05       	cpc	r31, r11
      c8:	fb 05       	cpc	r31, r11
      ca:	8a 07       	cpc	r24, r26
      cc:	fb 05       	cpc	r31, r11
      ce:	fb 05       	cpc	r31, r11
      d0:	fb 05       	cpc	r31, r11
      d2:	fb 05       	cpc	r31, r11
      d4:	fb 05       	cpc	r31, r11
      d6:	fb 05       	cpc	r31, r11
      d8:	fb 05       	cpc	r31, r11
      da:	fb 05       	cpc	r31, r11
      dc:	74 07       	cpc	r23, r20
      de:	7d 07       	cpc	r23, r29
      e0:	fb 05       	cpc	r31, r11
      e2:	79 07       	cpc	r23, r25

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf e5       	ldi	r28, 0x5F	; 95
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e6       	ldi	r26, 0x60	; 96
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	e8 e4       	ldi	r30, 0x48	; 72
      f8:	f5 e2       	ldi	r31, 0x25	; 37
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	aa 3e       	cpi	r26, 0xEA	; 234
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	aa ee       	ldi	r26, 0xEA	; 234
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	ab 3e       	cpi	r26, 0xEB	; 235
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 c9 05 	call	0xb92	; 0xb92 <main>
     11a:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <AddUser>:
  {
    H_Lcd_WriteCharacter(H_Eeprom_Read(0, i));
    //_delay_ms(250);
    //  H_Lcd_Clear();
  }
}
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	8c 01       	movw	r16, r24
     138:	7b 01       	movw	r14, r22
     13a:	64 e6       	ldi	r22, 0x64	; 100
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     142:	b8 2e       	mov	r11, r24
     144:	29 e0       	ldi	r18, 0x09	; 9
     146:	28 17       	cp	r18, r24
     148:	08 f4       	brcc	.+2      	; 0x14c <AddUser+0x2a>
     14a:	e2 c0       	rjmp	.+452    	; 0x310 <AddUser+0x1ee>
     14c:	81 11       	cpse	r24, r1
     14e:	33 c0       	rjmp	.+102    	; 0x1b6 <AddUser+0x94>
     150:	74 c0       	rjmp	.+232    	; 0x23a <AddUser+0x118>
     152:	dd 2d       	mov	r29, r13
     154:	dd 0f       	add	r29, r29
     156:	dd 0f       	add	r29, r29
     158:	dd 0f       	add	r29, r29
     15a:	dd 19       	sub	r29, r13
     15c:	0f 2e       	mov	r0, r31
     15e:	f3 e0       	ldi	r31, 0x03	; 3
     160:	cf 2e       	mov	r12, r31
     162:	f0 2d       	mov	r31, r0
     164:	c0 e0       	ldi	r28, 0x00	; 0
     166:	0d c0       	rjmp	.+26     	; 0x182 <AddUser+0x60>
     168:	6c 2f       	mov	r22, r28
     16a:	6d 0f       	add	r22, r29
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     172:	f8 01       	movw	r30, r16
     174:	ec 0f       	add	r30, r28
     176:	f1 1d       	adc	r31, r1
     178:	90 81       	ld	r25, Z
     17a:	89 13       	cpse	r24, r25
     17c:	01 c0       	rjmp	.+2      	; 0x180 <AddUser+0x5e>
     17e:	ca 94       	dec	r12
     180:	cf 5f       	subi	r28, 0xFF	; 255
     182:	c3 30       	cpi	r28, 0x03	; 3
     184:	88 f3       	brcs	.-30     	; 0x168 <AddUser+0x46>
     186:	c1 10       	cpse	r12, r1
     188:	14 c0       	rjmp	.+40     	; 0x1b2 <AddUser+0x90>
     18a:	a3 94       	inc	r10
     18c:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     190:	80 e6       	ldi	r24, 0x60	; 96
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     198:	80 e6       	ldi	r24, 0x60	; 96
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	99 e6       	ldi	r25, 0x69	; 105
     1a4:	28 e1       	ldi	r18, 0x18	; 24
     1a6:	81 50       	subi	r24, 0x01	; 1
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	20 40       	sbci	r18, 0x00	; 0
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <AddUser+0x84>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <AddUser+0x8e>
     1b0:	00 00       	nop
     1b2:	d3 94       	inc	r13
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <AddUser+0x98>
     1b6:	a1 2c       	mov	r10, r1
     1b8:	d1 2c       	mov	r13, r1
     1ba:	db 14       	cp	r13, r11
     1bc:	50 f2       	brcs	.-108    	; 0x152 <AddUser+0x30>
     1be:	a1 10       	cpse	r10, r1
     1c0:	c2 c0       	rjmp	.+388    	; 0x346 <AddUser+0x224>
     1c2:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     1c6:	81 e7       	ldi	r24, 0x71	; 113
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     1ce:	81 e7       	ldi	r24, 0x71	; 113
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	99 e6       	ldi	r25, 0x69	; 105
     1da:	28 e1       	ldi	r18, 0x18	; 24
     1dc:	81 50       	subi	r24, 0x01	; 1
     1de:	90 40       	sbci	r25, 0x00	; 0
     1e0:	20 40       	sbci	r18, 0x00	; 0
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <AddUser+0xba>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <AddUser+0xc4>
     1e6:	00 00       	nop
     1e8:	db 2d       	mov	r29, r11
     1ea:	dd 0f       	add	r29, r29
     1ec:	dd 0f       	add	r29, r29
     1ee:	dd 0f       	add	r29, r29
     1f0:	db 19       	sub	r29, r11
     1f2:	c0 e0       	ldi	r28, 0x00	; 0
     1f4:	0a c0       	rjmp	.+20     	; 0x20a <AddUser+0xe8>
     1f6:	4c 2f       	mov	r20, r28
     1f8:	4d 0f       	add	r20, r29
     1fa:	f8 01       	movw	r30, r16
     1fc:	ec 0f       	add	r30, r28
     1fe:	f1 1d       	adc	r31, r1
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     208:	cf 5f       	subi	r28, 0xFF	; 255
     20a:	c3 30       	cpi	r28, 0x03	; 3
     20c:	a0 f3       	brcs	.-24     	; 0x1f6 <AddUser+0xd4>
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	0b c0       	rjmp	.+22     	; 0x228 <AddUser+0x106>
     212:	4c 2f       	mov	r20, r28
     214:	4d 0f       	add	r20, r29
     216:	4d 5f       	subi	r20, 0xFD	; 253
     218:	f7 01       	movw	r30, r14
     21a:	ec 0f       	add	r30, r28
     21c:	f1 1d       	adc	r31, r1
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     226:	cf 5f       	subi	r28, 0xFF	; 255
     228:	c4 30       	cpi	r28, 0x04	; 4
     22a:	98 f3       	brcs	.-26     	; 0x212 <AddUser+0xf0>
     22c:	44 e6       	ldi	r20, 0x64	; 100
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	8b 0d       	add	r24, r11
     234:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     238:	86 c0       	rjmp	.+268    	; 0x346 <AddUser+0x224>
     23a:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     23e:	81 e7       	ldi	r24, 0x71	; 113
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	99 e6       	ldi	r25, 0x69	; 105
     24a:	28 e1       	ldi	r18, 0x18	; 24
     24c:	81 50       	subi	r24, 0x01	; 1
     24e:	90 40       	sbci	r25, 0x00	; 0
     250:	20 40       	sbci	r18, 0x00	; 0
     252:	e1 f7       	brne	.-8      	; 0x24c <AddUser+0x12a>
     254:	00 c0       	rjmp	.+0      	; 0x256 <AddUser+0x134>
     256:	00 00       	nop
     258:	81 e7       	ldi	r24, 0x71	; 113
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     260:	db 2d       	mov	r29, r11
     262:	dd 0f       	add	r29, r29
     264:	dd 0f       	add	r29, r29
     266:	dd 0f       	add	r29, r29
     268:	db 19       	sub	r29, r11
     26a:	c0 e0       	ldi	r28, 0x00	; 0
     26c:	0a c0       	rjmp	.+20     	; 0x282 <AddUser+0x160>
     26e:	4c 2f       	mov	r20, r28
     270:	4d 0f       	add	r20, r29
     272:	f8 01       	movw	r30, r16
     274:	ec 0f       	add	r30, r28
     276:	f1 1d       	adc	r31, r1
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     280:	cf 5f       	subi	r28, 0xFF	; 255
     282:	c3 30       	cpi	r28, 0x03	; 3
     284:	a0 f3       	brcs	.-24     	; 0x26e <AddUser+0x14c>
     286:	c0 e0       	ldi	r28, 0x00	; 0
     288:	0b c0       	rjmp	.+22     	; 0x2a0 <AddUser+0x17e>
     28a:	4c 2f       	mov	r20, r28
     28c:	4d 0f       	add	r20, r29
     28e:	4d 5f       	subi	r20, 0xFD	; 253
     290:	f7 01       	movw	r30, r14
     292:	ec 0f       	add	r30, r28
     294:	f1 1d       	adc	r31, r1
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     29e:	cf 5f       	subi	r28, 0xFF	; 255
     2a0:	c4 30       	cpi	r28, 0x04	; 4
     2a2:	98 f3       	brcs	.-26     	; 0x28a <AddUser+0x168>
     2a4:	44 e6       	ldi	r20, 0x64	; 100
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	8b 0d       	add	r24, r11
     2ac:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     2b0:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     2b4:	8d e7       	ldi	r24, 0x7D	; 125
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     2bc:	8d e7       	ldi	r24, 0x7D	; 125
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     2cc:	88 e8       	ldi	r24, 0x88	; 136
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     2d4:	88 e8       	ldi	r24, 0x88	; 136
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     2dc:	64 e6       	ldi	r22, 0x64	; 100
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     2e4:	68 2f       	mov	r22, r24
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 3a 0b 	call	0x1674	; 0x1674 <H_Lcd_WriteNumber>
     2f0:	64 e6       	ldi	r22, 0x64	; 100
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     2f8:	0e 94 35 08 	call	0x106a	; 0x106a <H_Hc05_Send>
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	99 e6       	ldi	r25, 0x69	; 105
     300:	28 e1       	ldi	r18, 0x18	; 24
     302:	81 50       	subi	r24, 0x01	; 1
     304:	90 40       	sbci	r25, 0x00	; 0
     306:	20 40       	sbci	r18, 0x00	; 0
     308:	e1 f7       	brne	.-8      	; 0x302 <AddUser+0x1e0>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <AddUser+0x1ea>
     30c:	00 00       	nop
     30e:	1b c0       	rjmp	.+54     	; 0x346 <AddUser+0x224>
     310:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     314:	85 e9       	ldi	r24, 0x95	; 149
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     324:	81 ea       	ldi	r24, 0xA1	; 161
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     32c:	81 eb       	ldi	r24, 0xB1	; 177
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	99 e6       	ldi	r25, 0x69	; 105
     338:	28 e1       	ldi	r18, 0x18	; 24
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	90 40       	sbci	r25, 0x00	; 0
     33e:	20 40       	sbci	r18, 0x00	; 0
     340:	e1 f7       	brne	.-8      	; 0x33a <AddUser+0x218>
     342:	00 c0       	rjmp	.+0      	; 0x344 <AddUser+0x222>
     344:	00 00       	nop
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	df 90       	pop	r13
     354:	cf 90       	pop	r12
     356:	bf 90       	pop	r11
     358:	af 90       	pop	r10
     35a:	08 95       	ret

0000035c <DeleteUser>:
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	c8 2e       	mov	r12, r24
     36e:	8b 01       	movw	r16, r22
     370:	2f ef       	ldi	r18, 0xFF	; 255
     372:	81 ee       	ldi	r24, 0xE1	; 225
     374:	94 e0       	ldi	r25, 0x04	; 4
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <DeleteUser+0x1a>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <DeleteUser+0x24>
     380:	00 00       	nop
     382:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     386:	c1 10       	cpse	r12, r1
     388:	57 c0       	rjmp	.+174    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     38a:	64 c0       	rjmp	.+200    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     38c:	df 2d       	mov	r29, r15
     38e:	dd 0f       	add	r29, r29
     390:	dd 0f       	add	r29, r29
     392:	dd 0f       	add	r29, r29
     394:	df 19       	sub	r29, r15
     396:	e1 2c       	mov	r14, r1
     398:	c0 e0       	ldi	r28, 0x00	; 0
     39a:	0d c0       	rjmp	.+26     	; 0x3b6 <DeleteUser+0x5a>
     39c:	6c 2f       	mov	r22, r28
     39e:	6d 0f       	add	r22, r29
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     3a6:	f8 01       	movw	r30, r16
     3a8:	ec 0f       	add	r30, r28
     3aa:	f1 1d       	adc	r31, r1
     3ac:	90 81       	ld	r25, Z
     3ae:	89 13       	cpse	r24, r25
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <DeleteUser+0x58>
     3b2:	e3 94       	inc	r14
     3b4:	cf 5f       	subi	r28, 0xFF	; 255
     3b6:	c3 30       	cpi	r28, 0x03	; 3
     3b8:	88 f3       	brcs	.-30     	; 0x39c <DeleteUser+0x40>
     3ba:	23 e0       	ldi	r18, 0x03	; 3
     3bc:	e2 12       	cpse	r14, r18
     3be:	12 c0       	rjmp	.+36     	; 0x3e4 <DeleteUser+0x88>
     3c0:	8d ec       	ldi	r24, 0xCD	; 205
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     3c8:	8d ec       	ldi	r24, 0xCD	; 205
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	93 ec       	ldi	r25, 0xC3	; 195
     3d4:	29 e0       	ldi	r18, 0x09	; 9
     3d6:	81 50       	subi	r24, 0x01	; 1
     3d8:	90 40       	sbci	r25, 0x00	; 0
     3da:	20 40       	sbci	r18, 0x00	; 0
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <DeleteUser+0x7a>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <DeleteUser+0x84>
     3e0:	00 00       	nop
     3e2:	d3 94       	inc	r13
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	d8 12       	cpse	r13, r24
     3e8:	25 c0       	rjmp	.+74     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     3ea:	0d c0       	rjmp	.+26     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3ec:	ec 2e       	mov	r14, r28
     3ee:	ed 0e       	add	r14, r29
     3f0:	67 e0       	ldi	r22, 0x07	; 7
     3f2:	6e 0d       	add	r22, r14
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     3fa:	4e 2d       	mov	r20, r14
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     402:	cf 5f       	subi	r28, 0xFF	; 255
     404:	01 c0       	rjmp	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     406:	c0 e0       	ldi	r28, 0x00	; 0
     408:	c3 30       	cpi	r28, 0x03	; 3
     40a:	80 f3       	brcs	.-32     	; 0x3ec <DeleteUser+0x90>
     40c:	c0 e0       	ldi	r28, 0x00	; 0
     40e:	10 c0       	rjmp	.+32     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     410:	6c 2f       	mov	r22, r28
     412:	6d 0f       	add	r22, r29
     414:	0f 2e       	mov	r0, r31
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	ef 2e       	mov	r14, r31
     41a:	f0 2d       	mov	r31, r0
     41c:	e6 0e       	add	r14, r22
     41e:	66 5f       	subi	r22, 0xF6	; 246
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     426:	4e 2d       	mov	r20, r14
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     42e:	cf 5f       	subi	r28, 0xFF	; 255
     430:	c4 30       	cpi	r28, 0x04	; 4
     432:	70 f3       	brcs	.-36     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     434:	f3 94       	inc	r15
     436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     438:	d1 2c       	mov	r13, r1
     43a:	f1 2c       	mov	r15, r1
     43c:	fc 14       	cp	r15, r12
     43e:	08 f4       	brcc	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     440:	a5 cf       	rjmp	.-182    	; 0x38c <DeleteUser+0x30>
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	d9 12       	cpse	r13, r25
     446:	06 c0       	rjmp	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     448:	44 e6       	ldi	r20, 0x64	; 100
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	8c 0d       	add	r24, r12
     450:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	08 95       	ret

00000466 <AdminLogin>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	7c 01       	movw	r14, r24
     474:	8b 01       	movw	r16, r22
     476:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	d0 e0       	ldi	r29, 0x00	; 0
     47e:	0d c0       	rjmp	.+26     	; 0x49a <AdminLogin+0x34>
     480:	65 e6       	ldi	r22, 0x65	; 101
     482:	6c 0f       	add	r22, r28
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     48a:	f7 01       	movw	r30, r14
     48c:	ec 0f       	add	r30, r28
     48e:	f1 1d       	adc	r31, r1
     490:	90 81       	ld	r25, Z
     492:	89 13       	cpse	r24, r25
     494:	01 c0       	rjmp	.+2      	; 0x498 <AdminLogin+0x32>
     496:	df 5f       	subi	r29, 0xFF	; 255
     498:	cf 5f       	subi	r28, 0xFF	; 255
     49a:	c3 30       	cpi	r28, 0x03	; 3
     49c:	88 f3       	brcs	.-30     	; 0x480 <AdminLogin+0x1a>
     49e:	c0 e0       	ldi	r28, 0x00	; 0
     4a0:	f1 2c       	mov	r15, r1
     4a2:	0d c0       	rjmp	.+26     	; 0x4be <AdminLogin+0x58>
     4a4:	68 e6       	ldi	r22, 0x68	; 104
     4a6:	6c 0f       	add	r22, r28
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     4ae:	f8 01       	movw	r30, r16
     4b0:	ec 0f       	add	r30, r28
     4b2:	f1 1d       	adc	r31, r1
     4b4:	90 81       	ld	r25, Z
     4b6:	89 13       	cpse	r24, r25
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <AdminLogin+0x56>
     4ba:	f3 94       	inc	r15
     4bc:	cf 5f       	subi	r28, 0xFF	; 255
     4be:	c4 30       	cpi	r28, 0x04	; 4
     4c0:	88 f3       	brcs	.-30     	; 0x4a4 <AdminLogin+0x3e>
     4c2:	d3 30       	cpi	r29, 0x03	; 3
     4c4:	b1 f4       	brne	.+44     	; 0x4f2 <AdminLogin+0x8c>
     4c6:	24 e0       	ldi	r18, 0x04	; 4
     4c8:	f2 12       	cpse	r15, r18
     4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <AdminLogin+0x8c>
     4cc:	8c ed       	ldi	r24, 0xDC	; 220
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     4d4:	8c ed       	ldi	r24, 0xDC	; 220
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	99 e6       	ldi	r25, 0x69	; 105
     4e0:	28 e1       	ldi	r18, 0x18	; 24
     4e2:	81 50       	subi	r24, 0x01	; 1
     4e4:	90 40       	sbci	r25, 0x00	; 0
     4e6:	20 40       	sbci	r18, 0x00	; 0
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <AdminLogin+0x7c>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <AdminLogin+0x86>
     4ec:	00 00       	nop
     4ee:	c0 e0       	ldi	r28, 0x00	; 0
     4f0:	53 c0       	rjmp	.+166    	; 0x598 <AdminLogin+0x132>
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	f8 12       	cpse	r15, r24
     4f6:	15 c0       	rjmp	.+42     	; 0x522 <AdminLogin+0xbc>
     4f8:	d3 30       	cpi	r29, 0x03	; 3
     4fa:	99 f0       	breq	.+38     	; 0x522 <AdminLogin+0xbc>
     4fc:	80 e6       	ldi	r24, 0x60	; 96
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     504:	80 e6       	ldi	r24, 0x60	; 96
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	29 e6       	ldi	r18, 0x69	; 105
     510:	88 e1       	ldi	r24, 0x18	; 24
     512:	91 50       	subi	r25, 0x01	; 1
     514:	20 40       	sbci	r18, 0x00	; 0
     516:	80 40       	sbci	r24, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <AdminLogin+0xac>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <AdminLogin+0xb6>
     51c:	00 00       	nop
     51e:	c1 e0       	ldi	r28, 0x01	; 1
     520:	3b c0       	rjmp	.+118    	; 0x598 <AdminLogin+0x132>
     522:	d3 30       	cpi	r29, 0x03	; 3
     524:	b1 f4       	brne	.+44     	; 0x552 <AdminLogin+0xec>
     526:	94 e0       	ldi	r25, 0x04	; 4
     528:	f9 16       	cp	r15, r25
     52a:	99 f0       	breq	.+38     	; 0x552 <AdminLogin+0xec>
     52c:	8d ee       	ldi	r24, 0xED	; 237
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     534:	8d ee       	ldi	r24, 0xED	; 237
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     53c:	2f ef       	ldi	r18, 0xFF	; 255
     53e:	89 e6       	ldi	r24, 0x69	; 105
     540:	98 e1       	ldi	r25, 0x18	; 24
     542:	21 50       	subi	r18, 0x01	; 1
     544:	80 40       	sbci	r24, 0x00	; 0
     546:	90 40       	sbci	r25, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <AdminLogin+0xdc>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <AdminLogin+0xe6>
     54c:	00 00       	nop
     54e:	c1 e0       	ldi	r28, 0x01	; 1
     550:	23 c0       	rjmp	.+70     	; 0x598 <AdminLogin+0x132>
     552:	d3 30       	cpi	r29, 0x03	; 3
     554:	f1 f0       	breq	.+60     	; 0x592 <AdminLogin+0x12c>
     556:	24 e0       	ldi	r18, 0x04	; 4
     558:	f2 16       	cp	r15, r18
     55a:	e9 f0       	breq	.+58     	; 0x596 <AdminLogin+0x130>
     55c:	80 e6       	ldi	r24, 0x60	; 96
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     56c:	8d ee       	ldi	r24, 0xED	; 237
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	99 e6       	ldi	r25, 0x69	; 105
     578:	28 e1       	ldi	r18, 0x18	; 24
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	20 40       	sbci	r18, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <AdminLogin+0x114>
     582:	00 c0       	rjmp	.+0      	; 0x584 <AdminLogin+0x11e>
     584:	00 00       	nop
     586:	8e ef       	ldi	r24, 0xFE	; 254
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     58e:	c1 e0       	ldi	r28, 0x01	; 1
     590:	03 c0       	rjmp	.+6      	; 0x598 <AdminLogin+0x132>
     592:	c0 e0       	ldi	r28, 0x00	; 0
     594:	01 c0       	rjmp	.+2      	; 0x598 <AdminLogin+0x132>
     596:	c0 e0       	ldi	r28, 0x00	; 0
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	95 ea       	ldi	r25, 0xA5	; 165
     59c:	2e e0       	ldi	r18, 0x0E	; 14
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	90 40       	sbci	r25, 0x00	; 0
     5a2:	20 40       	sbci	r18, 0x00	; 0
     5a4:	e1 f7       	brne	.-8      	; 0x59e <AdminLogin+0x138>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <AdminLogin+0x142>
     5a8:	00 00       	nop
     5aa:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	95 ea       	ldi	r25, 0xA5	; 165
     5b2:	2e e0       	ldi	r18, 0x0E	; 14
     5b4:	81 50       	subi	r24, 0x01	; 1
     5b6:	90 40       	sbci	r25, 0x00	; 0
     5b8:	20 40       	sbci	r18, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <AdminLogin+0x14e>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <AdminLogin+0x158>
     5be:	00 00       	nop
     5c0:	8c 2f       	mov	r24, r28
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <UserLogin>:
     5d0:	af 92       	push	r10
     5d2:	bf 92       	push	r11
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	7c 01       	movw	r14, r24
     5e6:	8b 01       	movw	r16, r22
     5e8:	64 e6       	ldi	r22, 0x64	; 100
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     5f0:	b8 2e       	mov	r11, r24
     5f2:	81 11       	cpse	r24, r1
     5f4:	33 c0       	rjmp	.+102    	; 0x65c <UserLogin+0x8c>
     5f6:	64 c0       	rjmp	.+200    	; 0x6c0 <UserLogin+0xf0>
     5f8:	dd 2d       	mov	r29, r13
     5fa:	dd 0f       	add	r29, r29
     5fc:	dd 0f       	add	r29, r29
     5fe:	dd 0f       	add	r29, r29
     600:	dd 19       	sub	r29, r13
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	c1 2c       	mov	r12, r1
     606:	0d c0       	rjmp	.+26     	; 0x622 <UserLogin+0x52>
     608:	6c 2f       	mov	r22, r28
     60a:	6d 0f       	add	r22, r29
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     612:	f7 01       	movw	r30, r14
     614:	ec 0f       	add	r30, r28
     616:	f1 1d       	adc	r31, r1
     618:	90 81       	ld	r25, Z
     61a:	89 13       	cpse	r24, r25
     61c:	01 c0       	rjmp	.+2      	; 0x620 <UserLogin+0x50>
     61e:	c3 94       	inc	r12
     620:	cf 5f       	subi	r28, 0xFF	; 255
     622:	c3 30       	cpi	r28, 0x03	; 3
     624:	88 f3       	brcs	.-30     	; 0x608 <UserLogin+0x38>
     626:	c0 e0       	ldi	r28, 0x00	; 0
     628:	a1 2c       	mov	r10, r1
     62a:	0e c0       	rjmp	.+28     	; 0x648 <UserLogin+0x78>
     62c:	6c 2f       	mov	r22, r28
     62e:	6d 0f       	add	r22, r29
     630:	6d 5f       	subi	r22, 0xFD	; 253
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     638:	f8 01       	movw	r30, r16
     63a:	ec 0f       	add	r30, r28
     63c:	f1 1d       	adc	r31, r1
     63e:	90 81       	ld	r25, Z
     640:	89 13       	cpse	r24, r25
     642:	01 c0       	rjmp	.+2      	; 0x646 <UserLogin+0x76>
     644:	a3 94       	inc	r10
     646:	cf 5f       	subi	r28, 0xFF	; 255
     648:	c4 30       	cpi	r28, 0x04	; 4
     64a:	80 f3       	brcs	.-32     	; 0x62c <UserLogin+0x5c>
     64c:	23 e0       	ldi	r18, 0x03	; 3
     64e:	c2 12       	cpse	r12, r18
     650:	03 c0       	rjmp	.+6      	; 0x658 <UserLogin+0x88>
     652:	84 e0       	ldi	r24, 0x04	; 4
     654:	a8 16       	cp	r10, r24
     656:	39 f0       	breq	.+14     	; 0x666 <UserLogin+0x96>
     658:	d3 94       	inc	r13
     65a:	01 c0       	rjmp	.+2      	; 0x65e <UserLogin+0x8e>
     65c:	d1 2c       	mov	r13, r1
     65e:	db 14       	cp	r13, r11
     660:	58 f2       	brcs	.-106    	; 0x5f8 <UserLogin+0x28>
     662:	a1 2c       	mov	r10, r1
     664:	c1 2c       	mov	r12, r1
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	c9 12       	cpse	r12, r25
     66a:	0d c0       	rjmp	.+26     	; 0x686 <UserLogin+0xb6>
     66c:	24 e0       	ldi	r18, 0x04	; 4
     66e:	a2 12       	cpse	r10, r18
     670:	0a c0       	rjmp	.+20     	; 0x686 <UserLogin+0xb6>
     672:	8c ed       	ldi	r24, 0xDC	; 220
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     67a:	8c ed       	ldi	r24, 0xDC	; 220
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	39 c0       	rjmp	.+114    	; 0x6f8 <UserLogin+0x128>
     686:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     68a:	80 e6       	ldi	r24, 0x60	; 96
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     69a:	8b e2       	ldi	r24, 0x2B	; 43
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     6a2:	8a e1       	ldi	r24, 0x1A	; 26
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     6aa:	8f ef       	ldi	r24, 0xFF	; 255
     6ac:	93 ed       	ldi	r25, 0xD3	; 211
     6ae:	20 e3       	ldi	r18, 0x30	; 48
     6b0:	81 50       	subi	r24, 0x01	; 1
     6b2:	90 40       	sbci	r25, 0x00	; 0
     6b4:	20 40       	sbci	r18, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <UserLogin+0xe0>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <UserLogin+0xea>
     6ba:	00 00       	nop
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	1c c0       	rjmp	.+56     	; 0x6f8 <UserLogin+0x128>
     6c0:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     6c4:	87 e3       	ldi	r24, 0x37	; 55
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     6d4:	8b e5       	ldi	r24, 0x5B	; 91
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     6dc:	89 e4       	ldi	r24, 0x49	; 73
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	93 ed       	ldi	r25, 0xD3	; 211
     6e8:	20 e3       	ldi	r18, 0x30	; 48
     6ea:	81 50       	subi	r24, 0x01	; 1
     6ec:	90 40       	sbci	r25, 0x00	; 0
     6ee:	20 40       	sbci	r18, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <UserLogin+0x11a>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <UserLogin+0x124>
     6f4:	00 00       	nop
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	bf 90       	pop	r11
     70a:	af 90       	pop	r10
     70c:	08 95       	ret

0000070e <InputID>:
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	8c 01       	movw	r16, r24
     716:	61 30       	cpi	r22, 0x01	; 1
     718:	19 f0       	breq	.+6      	; 0x720 <InputID+0x12>
     71a:	62 30       	cpi	r22, 0x02	; 2
     71c:	41 f1       	breq	.+80     	; 0x76e <InputID+0x60>
     71e:	43 c0       	rjmp	.+134    	; 0x7a6 <InputID+0x98>
     720:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     72c:	85 e6       	ldi	r24, 0x65	; 101
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     73c:	c0 e0       	ldi	r28, 0x00	; 0
     73e:	0b c0       	rjmp	.+22     	; 0x756 <InputID+0x48>
     740:	0e 94 54 08 	call	0x10a8	; 0x10a8 <H_Hc05_Rec>
     744:	88 23       	and	r24, r24
     746:	39 f0       	breq	.+14     	; 0x756 <InputID+0x48>
     748:	f8 01       	movw	r30, r16
     74a:	ec 0f       	add	r30, r28
     74c:	f1 1d       	adc	r31, r1
     74e:	80 83       	st	Z, r24
     750:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
     754:	cf 5f       	subi	r28, 0xFF	; 255
     756:	c3 30       	cpi	r28, 0x03	; 3
     758:	98 f3       	brcs	.-26     	; 0x740 <InputID+0x32>
     75a:	2f ef       	ldi	r18, 0xFF	; 255
     75c:	80 e7       	ldi	r24, 0x70	; 112
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	21 50       	subi	r18, 0x01	; 1
     762:	80 40       	sbci	r24, 0x00	; 0
     764:	90 40       	sbci	r25, 0x00	; 0
     766:	e1 f7       	brne	.-8      	; 0x760 <InputID+0x52>
     768:	00 c0       	rjmp	.+0      	; 0x76a <InputID+0x5c>
     76a:	00 00       	nop
     76c:	1c c0       	rjmp	.+56     	; 0x7a6 <InputID+0x98>
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	0b c0       	rjmp	.+22     	; 0x790 <InputID+0x82>
     77a:	0e 94 98 08 	call	0x1130	; 0x1130 <H_KeyPad_Read>
     77e:	88 23       	and	r24, r24
     780:	39 f0       	breq	.+14     	; 0x790 <InputID+0x82>
     782:	f8 01       	movw	r30, r16
     784:	ec 0f       	add	r30, r28
     786:	f1 1d       	adc	r31, r1
     788:	80 83       	st	Z, r24
     78a:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
     78e:	cf 5f       	subi	r28, 0xFF	; 255
     790:	c3 30       	cpi	r28, 0x03	; 3
     792:	98 f3       	brcs	.-26     	; 0x77a <InputID+0x6c>
     794:	2f ef       	ldi	r18, 0xFF	; 255
     796:	85 ea       	ldi	r24, 0xA5	; 165
     798:	9e e0       	ldi	r25, 0x0E	; 14
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	80 40       	sbci	r24, 0x00	; 0
     79e:	90 40       	sbci	r25, 0x00	; 0
     7a0:	e1 f7       	brne	.-8      	; 0x79a <InputID+0x8c>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <InputID+0x96>
     7a4:	00 00       	nop
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <InputPassword>:
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	8c 01       	movw	r16, r24
     7b6:	61 30       	cpi	r22, 0x01	; 1
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <InputPassword+0x12>
     7ba:	62 30       	cpi	r22, 0x02	; 2
     7bc:	49 f1       	breq	.+82     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7be:	45 c0       	rjmp	.+138    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     7c0:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     7cc:	83 e7       	ldi	r24, 0x73	; 115
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     7dc:	c0 e0       	ldi	r28, 0x00	; 0
     7de:	0c c0       	rjmp	.+24     	; 0x7f8 <InputPassword+0x4a>
     7e0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <H_Hc05_Rec>
     7e4:	88 23       	and	r24, r24
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <InputPassword+0x4a>
     7e8:	f8 01       	movw	r30, r16
     7ea:	ec 0f       	add	r30, r28
     7ec:	f1 1d       	adc	r31, r1
     7ee:	80 83       	st	Z, r24
     7f0:	8a e2       	ldi	r24, 0x2A	; 42
     7f2:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
     7f6:	cf 5f       	subi	r28, 0xFF	; 255
     7f8:	c4 30       	cpi	r28, 0x04	; 4
     7fa:	90 f3       	brcs	.-28     	; 0x7e0 <InputPassword+0x32>
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	80 e7       	ldi	r24, 0x70	; 112
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
     80e:	1d c0       	rjmp	.+58     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     818:	c0 e0       	ldi	r28, 0x00	; 0
     81a:	0c c0       	rjmp	.+24     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     81c:	0e 94 98 08 	call	0x1130	; 0x1130 <H_KeyPad_Read>
     820:	88 23       	and	r24, r24
     822:	41 f0       	breq	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     824:	f8 01       	movw	r30, r16
     826:	ec 0f       	add	r30, r28
     828:	f1 1d       	adc	r31, r1
     82a:	80 83       	st	Z, r24
     82c:	8a e2       	ldi	r24, 0x2A	; 42
     82e:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
     832:	cf 5f       	subi	r28, 0xFF	; 255
     834:	c4 30       	cpi	r28, 0x04	; 4
     836:	90 f3       	brcs	.-28     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     838:	2f ef       	ldi	r18, 0xFF	; 255
     83a:	85 ea       	ldi	r24, 0xA5	; 165
     83c:	9e e0       	ldi	r25, 0x0E	; 14
     83e:	21 50       	subi	r18, 0x01	; 1
     840:	80 40       	sbci	r24, 0x00	; 0
     842:	90 40       	sbci	r25, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     846:	00 c0       	rjmp	.+0      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     848:	00 00       	nop
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <SwitchDoor>:
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	ec 01       	movw	r28, r24
     858:	88 81       	ld	r24, Y
     85a:	81 11       	cpse	r24, r1
     85c:	20 c0       	rjmp	.+64     	; 0x89e <__stack+0x3f>
     85e:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     86a:	82 e8       	ldi	r24, 0x82	; 130
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     872:	82 e8       	ldi	r24, 0x82	; 130
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	80 ef       	ldi	r24, 0xF0	; 240
     880:	92 e4       	ldi	r25, 0x42	; 66
     882:	0e 94 92 0c 	call	0x1924	; 0x1924 <H_Servo_SetAngel>
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	89 e6       	ldi	r24, 0x69	; 105
     88a:	98 e1       	ldi	r25, 0x18	; 24
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <__stack+0x2d>
     894:	00 c0       	rjmp	.+0      	; 0x896 <__stack+0x37>
     896:	00 00       	nop
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	88 83       	st	Y, r24
     89c:	1d c0       	rjmp	.+58     	; 0x8d8 <__stack+0x79>
     89e:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     8aa:	81 e9       	ldi	r24, 0x91	; 145
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     8b2:	82 e8       	ldi	r24, 0x82	; 130
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	cb 01       	movw	r24, r22
     8c0:	0e 94 92 0c 	call	0x1924	; 0x1924 <H_Servo_SetAngel>
     8c4:	2f ef       	ldi	r18, 0xFF	; 255
     8c6:	89 e6       	ldi	r24, 0x69	; 105
     8c8:	98 e1       	ldi	r25, 0x18	; 24
     8ca:	21 50       	subi	r18, 0x01	; 1
     8cc:	80 40       	sbci	r24, 0x00	; 0
     8ce:	90 40       	sbci	r25, 0x00	; 0
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <__stack+0x6b>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <__stack+0x75>
     8d4:	00 00       	nop
     8d6:	18 82       	st	Y, r1
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <RelaySwitch>:
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
     8e4:	88 81       	ld	r24, Y
     8e6:	81 11       	cpse	r24, r1
     8e8:	13 c0       	rjmp	.+38     	; 0x910 <RelaySwitch+0x32>
     8ea:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     8f6:	80 ea       	ldi	r24, 0xA0	; 160
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     8fe:	80 ea       	ldi	r24, 0xA0	; 160
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     906:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <H_Relay_On>
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	88 83       	st	Y, r24
     90e:	13 c0       	rjmp	.+38     	; 0x936 <RelaySwitch+0x58>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	89 f4       	brne	.+34     	; 0x936 <RelaySwitch+0x58>
     914:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
     920:	8c ea       	ldi	r24, 0xAC	; 172
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     928:	8c ea       	ldi	r24, 0xAC	; 172
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     930:	0e 94 82 0c 	call	0x1904	; 0x1904 <H_Relay_Off>
     934:	18 82       	st	Y, r1
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <ACSwitch>:
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	88 81       	ld	r24, Y
     944:	81 11       	cpse	r24, r1
     946:	14 c0       	rjmp	.+40     	; 0x970 <ACSwitch+0x34>
     948:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <H_Lm35_Read>
     94c:	8b 31       	cpi	r24, 0x1B	; 27
     94e:	48 f0       	brcs	.+18     	; 0x962 <ACSwitch+0x26>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <H_DcMotor_SetDirection>
     956:	84 e6       	ldi	r24, 0x64	; 100
     958:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <H_DcMotor_Speed>
     95c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <H_DcMotor_Start>
     960:	04 c0       	rjmp	.+8      	; 0x96a <ACSwitch+0x2e>
     962:	85 31       	cpi	r24, 0x15	; 21
     964:	10 f4       	brcc	.+4      	; 0x96a <ACSwitch+0x2e>
     966:	0e 94 f7 07 	call	0xfee	; 0xfee <H_DcMotor_Stop>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	88 83       	st	Y, r24
     96e:	09 c0       	rjmp	.+18     	; 0x982 <ACSwitch+0x46>
     970:	0e 94 f7 07 	call	0xfee	; 0xfee <H_DcMotor_Stop>
     974:	81 e2       	ldi	r24, 0x21	; 33
     976:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Led_Off>
     97a:	80 e2       	ldi	r24, 0x20	; 32
     97c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Led_Off>
     980:	18 82       	st	Y, r1
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <DeleteAll>:

void DeleteAll (void)
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
  for (u16 i = 0; i <= 0xFF; i++)
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d0 e0       	ldi	r29, 0x00	; 0
     990:	06 c0       	rjmp	.+12     	; 0x99e <DeleteAll+0x16>
  {
    H_Eeprom_Write(0xFF, 0, i);
     992:	4c 2f       	mov	r20, r28
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
  }
}

void DeleteAll (void)
{
  for (u16 i = 0; i <= 0xFF; i++)
     99c:	21 96       	adiw	r28, 0x01	; 1
     99e:	cf 3f       	cpi	r28, 0xFF	; 255
     9a0:	d1 05       	cpc	r29, r1
     9a2:	b9 f3       	breq	.-18     	; 0x992 <DeleteAll+0xa>
     9a4:	b0 f3       	brcs	.-20     	; 0x992 <DeleteAll+0xa>
  {
    H_Eeprom_Write(0xFF, 0, i);
  }
  //H_Eeprom_Write(0xFF,0,0xFF);
  H_Eeprom_Write(0, 0, 100);
     9a6:	44 e6       	ldi	r20, 0x64	; 100
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <AppInit>:

void AppInit(void)
{
  H_Eeprom_Write('1', 0, 101);
     9b6:	45 e6       	ldi	r20, 0x65	; 101
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	81 e3       	ldi	r24, 0x31	; 49
     9bc:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
  H_Eeprom_Write('2', 0, 102);
     9c0:	46 e6       	ldi	r20, 0x66	; 102
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	82 e3       	ldi	r24, 0x32	; 50
     9c6:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
  H_Eeprom_Write('3', 0, 103);
     9ca:	47 e6       	ldi	r20, 0x67	; 103
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	83 e3       	ldi	r24, 0x33	; 51
     9d0:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
  H_Eeprom_Write('1', 0, 104);
     9d4:	48 e6       	ldi	r20, 0x68	; 104
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	81 e3       	ldi	r24, 0x31	; 49
     9da:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
  H_Eeprom_Write('2', 0, 105);
     9de:	49 e6       	ldi	r20, 0x69	; 105
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	82 e3       	ldi	r24, 0x32	; 50
     9e4:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
  H_Eeprom_Write('3', 0, 106);
     9e8:	4a e6       	ldi	r20, 0x6A	; 106
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	83 e3       	ldi	r24, 0x33	; 51
     9ee:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
  H_Eeprom_Write('4', 0, 107);
     9f2:	4b e6       	ldi	r20, 0x6B	; 107
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	84 e3       	ldi	r24, 0x34	; 52
     9f8:	0e 94 fd 07 	call	0xffa	; 0xffa <H_Eeprom_Write>
     9fc:	08 95       	ret

000009fe <WelcomingMsg>:
}

void WelcomingMsg(void)
{
  H_Lcd_Clear();
     9fe:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
  H_Lcd_WriteString("Welcome to Smart");
     a02:	89 eb       	ldi	r24, 0xB9	; 185
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
  H_Lcd_GoTo(1, 0);
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
  H_Lcd_WriteString("Home Project");
     a12:	8b ed       	ldi	r24, 0xDB	; 219
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a1a:	2f ef       	ldi	r18, 0xFF	; 255
     a1c:	87 ea       	ldi	r24, 0xA7	; 167
     a1e:	91 e6       	ldi	r25, 0x61	; 97
     a20:	21 50       	subi	r18, 0x01	; 1
     a22:	80 40       	sbci	r24, 0x00	; 0
     a24:	90 40       	sbci	r25, 0x00	; 0
     a26:	e1 f7       	brne	.-8      	; 0xa20 <WelcomingMsg+0x22>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <WelcomingMsg+0x2c>
     a2a:	00 00       	nop
  _delay_ms(2000);
  H_Lcd_Clear();
     a2c:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
  H_Hc05_SendString("Welcome to Smart Home Project");
     a30:	8a ec       	ldi	r24, 0xCA	; 202
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     a38:	08 95       	ret

00000a3a <CloseTheDoor>:
}

void CloseTheDoor(void)
{
  H_Servo_SetAngel(0);
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	cb 01       	movw	r24, r22
     a40:	0e 94 92 0c 	call	0x1924	; 0x1924 <H_Servo_SetAngel>
  H_Relay_Off();
     a44:	0e 94 82 0c 	call	0x1904	; 0x1904 <H_Relay_Off>
     a48:	08 95       	ret

00000a4a <CheckAC>:
}


void CheckAC(u8 ACState)
{
  if (ACState == 1)
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	11 f5       	brne	.+68     	; 0xa92 <CheckAC+0x48>
  {
	  u8 Temperature = 0;
	  Temperature = H_Lm35_Read();
     a4e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <H_Lm35_Read>
	  if (Temperature >= 26)
     a52:	8a 31       	cpi	r24, 0x1A	; 26
     a54:	48 f0       	brcs	.+18     	; 0xa68 <CheckAC+0x1e>
	  {
		  H_DcMotor_SetDirection(CW);
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <H_DcMotor_SetDirection>
		  H_DcMotor_Speed(100);
     a5c:	84 e6       	ldi	r24, 0x64	; 100
     a5e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <H_DcMotor_Speed>
		  H_DcMotor_Start();
     a62:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <H_DcMotor_Start>
     a66:	0a c0       	rjmp	.+20     	; 0xa7c <CheckAC+0x32>
	  }
	  else if (Temperature < 21)
     a68:	85 31       	cpi	r24, 0x15	; 21
     a6a:	40 f4       	brcc	.+16     	; 0xa7c <CheckAC+0x32>
	  {
		  H_Led_On(LED_1);
     a6c:	81 e2       	ldi	r24, 0x21	; 33
     a6e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <H_Led_On>
		  H_Led_Off(LED_0);
     a72:	80 e2       	ldi	r24, 0x20	; 32
     a74:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <H_Led_Off>
		  H_DcMotor_Stop();
     a78:	0e 94 f7 07 	call	0xfee	; 0xfee <H_DcMotor_Stop>
	  }
	  H_Lcd_Clear();
     a7c:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
	  H_Lcd_WriteString("AC Opened");
     a80:	88 ee       	ldi	r24, 0xE8	; 232
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
	  H_Hc05_SendString("AC Opened");
     a88:	88 ee       	ldi	r24, 0xE8	; 232
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     a90:	08 95       	ret
  }
  else
  {
	  H_DcMotor_Stop();
     a92:	0e 94 f7 07 	call	0xfee	; 0xfee <H_DcMotor_Stop>
	  H_Lcd_Clear();
     a96:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
	  H_Lcd_WriteString("AC Closed");
     a9a:	82 ef       	ldi	r24, 0xF2	; 242
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
	  H_Hc05_SendString("AC Closed");
     aa2:	82 ef       	ldi	r24, 0xF2	; 242
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     aaa:	08 95       	ret

00000aac <CheckRelay>:
  }
}

void CheckRelay(u8 RelayState)
{
  if (RelayState == 1)
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	59 f4       	brne	.+22     	; 0xac6 <CheckRelay+0x1a>
  {
    H_Lcd_WriteString(" Relay On");
     ab0:	8c ef       	ldi	r24, 0xFC	; 252
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
    H_Hc05_SendString(" Relay On");
     ab8:	8c ef       	ldi	r24, 0xFC	; 252
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
    H_Relay_On();
     ac0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <H_Relay_On>
     ac4:	08 95       	ret
  }
  else if (RelayState == 0)
     ac6:	81 11       	cpse	r24, r1
     ac8:	0a c0       	rjmp	.+20     	; 0xade <CheckRelay+0x32>
  {
    H_Lcd_WriteString(" Relay Off");
     aca:	86 e0       	ldi	r24, 0x06	; 6
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
    H_Hc05_SendString(" Relay Off");
     ad2:	86 e0       	ldi	r24, 0x06	; 6
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
    H_Relay_Off();
     ada:	0e 94 82 0c 	call	0x1904	; 0x1904 <H_Relay_Off>
     ade:	08 95       	ret

00000ae0 <CheckDoor>:
  }
}

void CheckDoor(u8 DoorState)
{
  if (DoorState == 1)
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	d9 f4       	brne	.+54     	; 0xb1a <CheckDoor+0x3a>
  {
    H_Lcd_GoTo(1, 0);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
    H_Lcd_WriteString("Door Is Opened");
     aea:	82 e8       	ldi	r24, 0x82	; 130
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
    H_Hc05_SendString("Door Is Opened");
     af2:	82 e8       	ldi	r24, 0x82	; 130
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
    H_Servo_SetAngel(120);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 ef       	ldi	r24, 0xF0	; 240
     b00:	92 e4       	ldi	r25, 0x42	; 66
     b02:	0e 94 92 0c 	call	0x1924	; 0x1924 <H_Servo_SetAngel>
     b06:	2f ef       	ldi	r18, 0xFF	; 255
     b08:	89 e6       	ldi	r24, 0x69	; 105
     b0a:	98 e1       	ldi	r25, 0x18	; 24
     b0c:	21 50       	subi	r18, 0x01	; 1
     b0e:	80 40       	sbci	r24, 0x00	; 0
     b10:	90 40       	sbci	r25, 0x00	; 0
     b12:	e1 f7       	brne	.-8      	; 0xb0c <CheckDoor+0x2c>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <CheckDoor+0x36>
     b16:	00 00       	nop
     b18:	08 95       	ret
    _delay_ms(500);
  }
  else
  {
    H_Lcd_GoTo(1, 0);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
    H_Lcd_WriteString("Door Is Closed");
     b22:	81 e9       	ldi	r24, 0x91	; 145
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
    H_Hc05_SendString("Door Is Closed");
     b2a:	81 e9       	ldi	r24, 0x91	; 145
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
    H_Servo_SetAngel(0);
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	cb 01       	movw	r24, r22
     b38:	0e 94 92 0c 	call	0x1924	; 0x1924 <H_Servo_SetAngel>
     b3c:	2f ef       	ldi	r18, 0xFF	; 255
     b3e:	89 e6       	ldi	r24, 0x69	; 105
     b40:	98 e1       	ldi	r25, 0x18	; 24
     b42:	21 50       	subi	r18, 0x01	; 1
     b44:	80 40       	sbci	r24, 0x00	; 0
     b46:	90 40       	sbci	r25, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <CheckDoor+0x62>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <CheckDoor+0x6c>
     b4c:	00 00       	nop
     b4e:	08 95       	ret

00000b50 <Reset>:

}

void Reset(u8* ACState, u8* DoorState, u8* RelayState)
{
  *ACState = 0;
     b50:	fc 01       	movw	r30, r24
     b52:	10 82       	st	Z, r1
  *DoorState = 0;
     b54:	fb 01       	movw	r30, r22
     b56:	10 82       	st	Z, r1
  *RelayState = 0;
     b58:	fa 01       	movw	r30, r20
     b5a:	10 82       	st	Z, r1
  H_DcMotor_Stop();
     b5c:	0e 94 f7 07 	call	0xfee	; 0xfee <H_DcMotor_Stop>
  CloseTheDoor();
     b60:	0e 94 1d 05 	call	0xa3a	; 0xa3a <CloseTheDoor>
  H_Relay_Off();
     b64:	0e 94 82 0c 	call	0x1904	; 0x1904 <H_Relay_Off>
  H_Hc05_SendString("A/C Off");
     b68:	81 e1       	ldi	r24, 0x11	; 17
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
  H_Hc05_SendString("Door is closed");
     b70:	89 e1       	ldi	r24, 0x19	; 25
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
  H_Hc05_SendString("Relay Off");
     b78:	87 e0       	ldi	r24, 0x07	; 7
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
  H_Hc05_SendString("Resetting  the system...");
     b80:	88 e2       	ldi	r24, 0x28	; 40
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
  DeleteAll();
     b88:	0e 94 c4 04 	call	0x988	; 0x988 <DeleteAll>
  AppInit();
     b8c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <AppInit>
     b90:	08 95       	ret

00000b92 <main>:
  Admin UserName is 123
  Admin Location is @ 101 byte address page 1             */
/************************************************************************/

int main ()
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	2a 97       	sbiw	r28, 0x0a	; 10
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
  H_Lcd_Init();
     ba6:	0e 94 02 0b 	call	0x1604	; 0x1604 <H_Lcd_Init>
  H_KeyPad_Init();
     baa:	0e 94 57 08 	call	0x10ae	; 0x10ae <H_KeyPad_Init>
  H_Eeprom_Init();
     bae:	0e 94 fa 07 	call	0xff4	; 0xff4 <H_Eeprom_Init>
  H_DcMotor_Init();
     bb2:	0e 94 dd 07 	call	0xfba	; 0xfba <H_DcMotor_Init>
  H_Lm35_Init();
     bb6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <H_Lm35_Init>
  H_Servo_Init();
     bba:	0e 94 87 0c 	call	0x190e	; 0x190e <H_Servo_Init>
  H_Led_Init(LED_0);
     bbe:	80 e2       	ldi	r24, 0x20	; 32
     bc0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <H_Led_Init>
  H_Led_Init(LED_1);
     bc4:	81 e2       	ldi	r24, 0x21	; 33
     bc6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <H_Led_Init>
  H_Buzzer_Init();
     bca:	0e 94 ce 07 	call	0xf9c	; 0xf9c <H_Buzzer_Init>
  H_PushButton_Init();
     bce:	0e 94 6f 0c 	call	0x18de	; 0x18de <H_PushButton_Init>
  H_Relay_Init();
     bd2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <H_Relay_Init>
  H_Hc05_Init();
     bd6:	0e 94 32 08 	call	0x1064	; 0x1064 <H_Hc05_Init>
  //  DeleteAll();
  //  AppInit();

  char NumberOfUsers = 0;

  NumberOfUsers = H_Eeprom_Read(0, 100);
     bda:	64 e6       	ldi	r22, 0x64	; 100
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
  u8 UserID   [3] = {0, 0, 0};
     be2:	19 82       	std	Y+1, r1	; 0x01
     be4:	1a 82       	std	Y+2, r1	; 0x02
     be6:	1b 82       	std	Y+3, r1	; 0x03
  u8 UserPassword [4] = {0, 0, 0, 0};
     be8:	1c 82       	std	Y+4, r1	; 0x04
     bea:	1d 82       	std	Y+5, r1	; 0x05
     bec:	1e 82       	std	Y+6, r1	; 0x06
     bee:	1f 82       	std	Y+7, r1	; 0x07
  u8 KeyPressed = 0;
  u8 Trails = 0;
  u8 DoorState = 0;
     bf0:	18 86       	std	Y+8, r1	; 0x08
  u8 ACState = 0;
     bf2:	19 86       	std	Y+9, r1	; 0x09
  u8 RelayState = 0;
     bf4:	1a 86       	std	Y+10, r1	; 0x0a
  u8 BluetoothData = 0;

  while (1)
  {
    switch (AppState)
     bf6:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <__data_end>
     bfa:	8e 2f       	mov	r24, r30
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	83 33       	cpi	r24, 0x33	; 51
     c00:	91 05       	cpc	r25, r1
     c02:	c8 f7       	brcc	.-14     	; 0xbf6 <main+0x64>
     c04:	fc 01       	movw	r30, r24
     c06:	e6 5d       	subi	r30, 0xD6	; 214
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__tablejump2__>
    {
      case WELCOME :
        WelcomingMsg();
     c0e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <WelcomingMsg>
        AppState = FIRST_PAGE;
     c12:	80 e3       	ldi	r24, 0x30	; 48
     c14:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
        break;
     c18:	ee cf       	rjmp	.-36     	; 0xbf6 <main+0x64>
      case FIRST_PAGE:
        H_Lcd_Clear();
     c1a:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
        H_Lcd_WriteString("    Welcome     ");
     c1e:	81 e4       	ldi	r24, 0x41	; 65
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
        H_Hc05_SendString("Choose user using Keypad");
     c26:	82 e5       	ldi	r24, 0x52	; 82
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
        H_Lcd_GoTo(1, 0);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
        H_Lcd_WriteString("1:Admin 2:User");
     c36:	8b e6       	ldi	r24, 0x6B	; 107
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
        H_Hc05_SendString("1:Admin 2:User");
     c3e:	8b e6       	ldi	r24, 0x6B	; 107
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
        KeyPressed = H_KeyPad_Read();
     c46:	0e 94 98 08 	call	0x1130	; 0x1130 <H_KeyPad_Read>
        while (!KeyPressed)
     c4a:	0d c0       	rjmp	.+26     	; 0xc66 <main+0xd4>
        {
          KeyPressed = H_KeyPad_Read();
     c4c:	0e 94 98 08 	call	0x1130	; 0x1130 <H_KeyPad_Read>
          if (KeyPressed == '1')
     c50:	81 33       	cpi	r24, 0x31	; 49
     c52:	21 f4       	brne	.+8      	; 0xc5c <main+0xca>
          {
            AppState = ADMIN_LOGIN_PAGE;
     c54:	91 e3       	ldi	r25, 0x31	; 49
     c56:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <__data_end>
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <main+0xd4>
          }
          else if (KeyPressed == '2')
     c5c:	82 33       	cpi	r24, 0x32	; 50
     c5e:	19 f4       	brne	.+6      	; 0xc66 <main+0xd4>
          {
            AppState = USER_LOGIN_PAGE;
     c60:	92 e3       	ldi	r25, 0x32	; 50
     c62:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <__data_end>
        H_Hc05_SendString("Choose user using Keypad");
        H_Lcd_GoTo(1, 0);
        H_Lcd_WriteString("1:Admin 2:User");
        H_Hc05_SendString("1:Admin 2:User");
        KeyPressed = H_KeyPad_Read();
        while (!KeyPressed)
     c66:	88 23       	and	r24, r24
     c68:	89 f3       	breq	.-30     	; 0xc4c <main+0xba>
     c6a:	c5 cf       	rjmp	.-118    	; 0xbf6 <main+0x64>
        }
        break;

      case ADMIN_LOGIN_PAGE:
        Trails = 0;
        H_Lcd_Clear();
     c6c:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
        H_Hc05_SendString("Welcome Admin");
     c70:	8a e7       	ldi	r24, 0x7A	; 122
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
        H_Lcd_WriteString("Welcome Admin");
     c78:	8a e7       	ldi	r24, 0x7A	; 122
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     c80:	2f ef       	ldi	r18, 0xFF	; 255
     c82:	83 ed       	ldi	r24, 0xD3	; 211
     c84:	90 e3       	ldi	r25, 0x30	; 48
     c86:	21 50       	subi	r18, 0x01	; 1
     c88:	80 40       	sbci	r24, 0x00	; 0
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <main+0xf4>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <main+0xfe>
     c90:	00 00       	nop
        _delay_ms(1000);
        H_Lcd_Clear();
     c92:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
        H_Lcd_GoTo(0, 0);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
        H_Lcd_WriteString("Admin Mode");
     c9e:	88 e8       	ldi	r24, 0x88	; 136
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
        H_Lcd_GoTo(1, 0);
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
        H_Lcd_WriteString("Use Bluetooth");
     cae:	83 e9       	ldi	r24, 0x93	; 147
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
        H_Hc05_SendString("Use Bluetooth");
     cb6:	83 e9       	ldi	r24, 0x93	; 147
     cb8:	92 e0       	ldi	r25, 0x02	; 2
     cba:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     cbe:	2f ef       	ldi	r18, 0xFF	; 255
     cc0:	8b e7       	ldi	r24, 0x7B	; 123
     cc2:	92 e9       	ldi	r25, 0x92	; 146
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <main+0x132>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <main+0x13c>
     cce:	00 00       	nop

        }
        break;

      case ADMIN_LOGIN_PAGE:
        Trails = 0;
     cd0:	10 e0       	ldi	r17, 0x00	; 0
     cd2:	41 c0       	rjmp	.+130    	; 0xd56 <main+0x1c4>
        H_Hc05_SendString("Use Bluetooth");
        _delay_ms(3000);

        while (Trails < 3)
        {
          H_Hc05_SendString("Enter Username");
     cd4:	81 ea       	ldi	r24, 0xA1	; 161
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
          InputID(UserID, AdminMode);
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	0e 94 87 03 	call	0x70e	; 0x70e <InputID>
          H_Hc05_SendString("Enter Password");
     ce6:	83 e7       	ldi	r24, 0x73	; 115
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
          InputPassword(UserPassword, AdminMode);
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	ce 01       	movw	r24, r28
     cf2:	04 96       	adiw	r24, 0x04	; 4
     cf4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <InputPassword>

          if (AdminLogin(UserID, UserPassword) == 0)
     cf8:	be 01       	movw	r22, r28
     cfa:	6c 5f       	subi	r22, 0xFC	; 252
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 33 02 	call	0x466	; 0x466 <AdminLogin>
     d06:	81 11       	cpse	r24, r1
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <main+0x180>
          {
            AppState = ADMIN_SECOND_PAGE;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
            break;
     d10:	72 cf       	rjmp	.-284    	; 0xbf6 <main+0x64>
          }
          else
          {
            Trails++;
     d12:	1f 5f       	subi	r17, 0xFF	; 255
            if (Trails == 3)
     d14:	13 30       	cpi	r17, 0x03	; 3
     d16:	f9 f4       	brne	.+62     	; 0xd56 <main+0x1c4>
            {
              H_Buzzer_On();
     d18:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <H_Buzzer_On>
              CloseTheDoor();
     d1c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <CloseTheDoor>
              KeyPressed = H_PushButton_Read();
     d20:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
              while (1)
              {
                if (H_PushButton_Read() == PRESSED)
     d24:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <main+0x192>
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	87 ee       	ldi	r24, 0xE7	; 231
     d30:	93 e0       	ldi	r25, 0x03	; 3
     d32:	21 50       	subi	r18, 0x01	; 1
     d34:	80 40       	sbci	r24, 0x00	; 0
     d36:	90 40       	sbci	r25, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <main+0x1a0>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <main+0x1aa>
     d3c:	00 00       	nop
                {
                  _delay_ms(80);
                  if (H_PushButton_Read() == PRESSED)
     d3e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	79 f7       	brne	.-34     	; 0xd24 <main+0x192>
                  {
                    while (H_PushButton_Read() == PRESSED);
     d46:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	e1 f3       	breq	.-8      	; 0xd46 <main+0x1b4>
                    H_Buzzer_Off();
     d4e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <H_Buzzer_Off>
                    AppState = WELCOME;
     d52:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__data_end>
        H_Lcd_GoTo(1, 0);
        H_Lcd_WriteString("Use Bluetooth");
        H_Hc05_SendString("Use Bluetooth");
        _delay_ms(3000);

        while (Trails < 3)
     d56:	13 30       	cpi	r17, 0x03	; 3
     d58:	08 f4       	brcc	.+2      	; 0xd5c <main+0x1ca>
     d5a:	bc cf       	rjmp	.-136    	; 0xcd4 <main+0x142>
     d5c:	4c cf       	rjmp	.-360    	; 0xbf6 <main+0x64>
        Trails = 0;
        break;

      case USER_LOGIN_PAGE:
        Trails = 0;
        H_Lcd_Clear();
     d5e:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
        H_Lcd_WriteString("Welcome User");
     d62:	80 eb       	ldi	r24, 0xB0	; 176
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
     d6a:	2f ef       	ldi	r18, 0xFF	; 255
     d6c:	83 ed       	ldi	r24, 0xD3	; 211
     d6e:	90 e3       	ldi	r25, 0x30	; 48
     d70:	21 50       	subi	r18, 0x01	; 1
     d72:	80 40       	sbci	r24, 0x00	; 0
     d74:	90 40       	sbci	r25, 0x00	; 0
     d76:	e1 f7       	brne	.-8      	; 0xd70 <main+0x1de>
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <main+0x1e8>
     d7a:	00 00       	nop
        }
        Trails = 0;
        break;

      case USER_LOGIN_PAGE:
        Trails = 0;
     d7c:	10 e0       	ldi	r17, 0x00	; 0
     d7e:	4f c0       	rjmp	.+158    	; 0xe1e <main+0x28c>
        H_Lcd_Clear();
        H_Lcd_WriteString("Welcome User");
        _delay_ms(1000);
        while (Trails < 3)
        {
          H_Lcd_Clear();
     d80:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
          H_Lcd_WriteString("Enter Username");
     d84:	81 ea       	ldi	r24, 0xA1	; 161
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
          InputID(UserID, UserMode);
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 87 03 	call	0x70e	; 0x70e <InputID>
          H_Lcd_Clear();
     d96:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
          H_Lcd_WriteString("Enter Password");
     d9a:	83 e7       	ldi	r24, 0x73	; 115
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
          InputPassword(UserPassword, UserMode);
     da2:	62 e0       	ldi	r22, 0x02	; 2
     da4:	ce 01       	movw	r24, r28
     da6:	04 96       	adiw	r24, 0x04	; 4
     da8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <InputPassword>
          u8 LoginResult = UserLogin(UserID, UserPassword);
     dac:	be 01       	movw	r22, r28
     dae:	6c 5f       	subi	r22, 0xFC	; 252
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <UserLogin>

          if (LoginResult == 0)
     dba:	81 11       	cpse	r24, r1
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <main+0x234>
          {
            AppState = USER_SECOND_PAGE;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
            break;
     dc4:	18 cf       	rjmp	.-464    	; 0xbf6 <main+0x64>
          }
          else if (LoginResult == 2)
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <main+0x240>
          {
            AppState = FIRST_PAGE;
     dca:	80 e3       	ldi	r24, 0x30	; 48
     dcc:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
            break;
     dd0:	12 cf       	rjmp	.-476    	; 0xbf6 <main+0x64>
          }
          else if (LoginResult == 1)
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	21 f5       	brne	.+72     	; 0xe1e <main+0x28c>
          {
            Trails++;
     dd6:	1f 5f       	subi	r17, 0xFF	; 255
            if (Trails == 3)
     dd8:	13 30       	cpi	r17, 0x03	; 3
     dda:	09 f5       	brne	.+66     	; 0xe1e <main+0x28c>
            {
              H_Buzzer_On();
     ddc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <H_Buzzer_On>
              CloseTheDoor();
     de0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <CloseTheDoor>
              H_Lcd_Clear();
     de4:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
              KeyPressed = H_PushButton_Read();
     de8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
              while (1)
              {
                if (H_PushButton_Read() == PRESSED)
     dec:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	e1 f7       	brne	.-8      	; 0xdec <main+0x25a>
     df4:	2f ef       	ldi	r18, 0xFF	; 255
     df6:	87 ee       	ldi	r24, 0xE7	; 231
     df8:	93 e0       	ldi	r25, 0x03	; 3
     dfa:	21 50       	subi	r18, 0x01	; 1
     dfc:	80 40       	sbci	r24, 0x00	; 0
     dfe:	90 40       	sbci	r25, 0x00	; 0
     e00:	e1 f7       	brne	.-8      	; 0xdfa <main+0x268>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <main+0x272>
     e04:	00 00       	nop
                {
                  _delay_ms(80);
                  if (H_PushButton_Read() == PRESSED)
     e06:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	79 f7       	brne	.-34     	; 0xdec <main+0x25a>
                  {
                    while (H_PushButton_Read() == PRESSED);
     e0e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <H_PushButton_Read>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	e1 f3       	breq	.-8      	; 0xe0e <main+0x27c>
                    H_Buzzer_Off();
     e16:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <H_Buzzer_Off>
                    AppState = WELCOME;
     e1a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__data_end>
      case USER_LOGIN_PAGE:
        Trails = 0;
        H_Lcd_Clear();
        H_Lcd_WriteString("Welcome User");
        _delay_ms(1000);
        while (Trails < 3)
     e1e:	13 30       	cpi	r17, 0x03	; 3
     e20:	08 f4       	brcc	.+2      	; 0xe24 <main+0x292>
     e22:	ae cf       	rjmp	.-164    	; 0xd80 <main+0x1ee>
     e24:	e8 ce       	rjmp	.-560    	; 0xbf6 <main+0x64>
        Trails = 0;
        break;

      case ADMIN_SECOND_PAGE:
        BluetoothData = 0;
        BluetoothData = H_Hc05_Rec();
     e26:	0e 94 54 08 	call	0x10a8	; 0x10a8 <H_Hc05_Rec>
        switch (BluetoothData)
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	e1 54       	subi	r30, 0x41	; 65
     e30:	f1 09       	sbc	r31, r1
     e32:	e5 31       	cpi	r30, 0x15	; 21
     e34:	f1 05       	cpc	r31, r1
     e36:	08 f0       	brcs	.+2      	; 0xe3a <main+0x2a8>
     e38:	de ce       	rjmp	.-580    	; 0xbf6 <main+0x64>
     e3a:	e3 5a       	subi	r30, 0xA3	; 163
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__tablejump2__>
        {
          // A ->  A/C Switch
          case 'A':    ACSwitch(&ACState);                          break;
     e42:	ce 01       	movw	r24, r28
     e44:	09 96       	adiw	r24, 0x09	; 9
     e46:	0e 94 9e 04 	call	0x93c	; 0x93c <ACSwitch>
     e4a:	d5 ce       	rjmp	.-598    	; 0xbf6 <main+0x64>
          // B ->  Add user
          case 'B':
            H_Lcd_Clear(); H_Lcd_WriteString("Use KeyPad");
     e4c:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     e50:	8d eb       	ldi	r24, 0xBD	; 189
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
            H_Hc05_SendString("Use KeyPad");
     e58:	8d eb       	ldi	r24, 0xBD	; 189
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     e60:	2f ef       	ldi	r18, 0xFF	; 255
     e62:	8b e7       	ldi	r24, 0x7B	; 123
     e64:	92 e9       	ldi	r25, 0x92	; 146
     e66:	21 50       	subi	r18, 0x01	; 1
     e68:	80 40       	sbci	r24, 0x00	; 0
     e6a:	90 40       	sbci	r25, 0x00	; 0
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <main+0x2d4>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <main+0x2de>
     e70:	00 00       	nop
            _delay_ms(3000);
            InputID(UserID, UserMode);
     e72:	62 e0       	ldi	r22, 0x02	; 2
     e74:	ce 01       	movw	r24, r28
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	0e 94 87 03 	call	0x70e	; 0x70e <InputID>
            InputPassword(UserPassword, UserMode);
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	ce 01       	movw	r24, r28
     e80:	04 96       	adiw	r24, 0x04	; 4
     e82:	0e 94 d7 03 	call	0x7ae	; 0x7ae <InputPassword>
            AddUser(UserID, UserPassword);                       break;
     e86:	be 01       	movw	r22, r28
     e88:	6c 5f       	subi	r22, 0xFC	; 252
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	ce 01       	movw	r24, r28
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	0e 94 91 00 	call	0x122	; 0x122 <AddUser>
     e94:	b0 ce       	rjmp	.-672    	; 0xbf6 <main+0x64>
          // C -> Remove user
          case 'C':
            NumberOfUsers = H_Eeprom_Read(0, 100);
     e96:	64 e6       	ldi	r22, 0x64	; 100
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 17 08 	call	0x102e	; 0x102e <H_Eeprom_Read>
     e9e:	18 2f       	mov	r17, r24
            H_Lcd_Clear(); H_Lcd_WriteString("Use Bluetooth");
     ea0:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
     ea4:	83 e9       	ldi	r24, 0x93	; 147
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
            H_Hc05_SendString("Use Bluetooth"); _delay_ms(3000);
     eac:	83 e9       	ldi	r24, 0x93	; 147
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	0e 94 38 08 	call	0x1070	; 0x1070 <H_Hc05_SendString>
     eb4:	2f ef       	ldi	r18, 0xFF	; 255
     eb6:	8b e7       	ldi	r24, 0x7B	; 123
     eb8:	92 e9       	ldi	r25, 0x92	; 146
     eba:	21 50       	subi	r18, 0x01	; 1
     ebc:	80 40       	sbci	r24, 0x00	; 0
     ebe:	90 40       	sbci	r25, 0x00	; 0
     ec0:	e1 f7       	brne	.-8      	; 0xeba <main+0x328>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <main+0x332>
     ec4:	00 00       	nop
            InputID(&UserID, AdminMode);
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	0e 94 87 03 	call	0x70e	; 0x70e <InputID>
            DeleteUser(NumberOfUsers, UserID);                     break;
     ed0:	be 01       	movw	r22, r28
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	81 2f       	mov	r24, r17
     ed8:	0e 94 ae 01 	call	0x35c	; 0x35c <DeleteUser>
     edc:	8c ce       	rjmp	.-744    	; 0xbf6 <main+0x64>
          // D -> Door Switch
          case 'D':   SwitchDoor(&DoorState);                         break;
     ede:	ce 01       	movw	r24, r28
     ee0:	08 96       	adiw	r24, 0x08	; 8
     ee2:	0e 94 29 04 	call	0x852	; 0x852 <SwitchDoor>
     ee6:	87 ce       	rjmp	.-754    	; 0xbf6 <main+0x64>
          // R -> Relay Switch
          case 'R':   RelaySwitch(&RelayState);                       break;
     ee8:	ce 01       	movw	r24, r28
     eea:	0a 96       	adiw	r24, 0x0a	; 10
     eec:	0e 94 6f 04 	call	0x8de	; 0x8de <RelaySwitch>
     ef0:	82 ce       	rjmp	.-764    	; 0xbf6 <main+0x64>
          // U -> User Mode
          case 'U':     AppState = USER_LOGIN_PAGE;                      break;
     ef2:	82 e3       	ldi	r24, 0x32	; 50
     ef4:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
     ef8:	7e ce       	rjmp	.-772    	; 0xbf6 <main+0x64>
          // S -> Resut Mode
          case 'S': Reset(&ACState, &DoorState, &RelayState);  AppState = WELCOME;         break;
     efa:	ae 01       	movw	r20, r28
     efc:	46 5f       	subi	r20, 0xF6	; 246
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	be 01       	movw	r22, r28
     f02:	68 5f       	subi	r22, 0xF8	; 248
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	ce 01       	movw	r24, r28
     f08:	09 96       	adiw	r24, 0x09	; 9
     f0a:	0e 94 a8 05 	call	0xb50	; 0xb50 <Reset>
     f0e:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__data_end>
     f12:	71 ce       	rjmp	.-798    	; 0xbf6 <main+0x64>
          //I -> Idle State (OK)
          case 'I':     AppState = IDLE_STATE;                       break;
     f14:	85 e0       	ldi	r24, 0x05	; 5
     f16:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
     f1a:	6d ce       	rjmp	.-806    	; 0xbf6 <main+0x64>
          default:                                        break;
        }
        break;
      case IDLE_STATE:
        BluetoothData = H_Hc05_Rec();
     f1c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <H_Hc05_Rec>
     f20:	18 2f       	mov	r17, r24
        while (!BluetoothData)
     f22:	0c c0       	rjmp	.+24     	; 0xf3c <main+0x3aa>
        {
          BluetoothData = H_Hc05_Rec();
     f24:	0e 94 54 08 	call	0x10a8	; 0x10a8 <H_Hc05_Rec>
     f28:	18 2f       	mov	r17, r24
          CheckAC(ACState);
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	0e 94 25 05 	call	0xa4a	; 0xa4a <CheckAC>
          CheckRelay(RelayState);
     f30:	8a 85       	ldd	r24, Y+10	; 0x0a
     f32:	0e 94 56 05 	call	0xaac	; 0xaac <CheckRelay>
          CheckDoor(DoorState);
     f36:	88 85       	ldd	r24, Y+8	; 0x08
     f38:	0e 94 70 05 	call	0xae0	; 0xae0 <CheckDoor>
          default:                                        break;
        }
        break;
      case IDLE_STATE:
        BluetoothData = H_Hc05_Rec();
        while (!BluetoothData)
     f3c:	11 23       	and	r17, r17
     f3e:	91 f3       	breq	.-28     	; 0xf24 <main+0x392>
          BluetoothData = H_Hc05_Rec();
          CheckAC(ACState);
          CheckRelay(RelayState);
          CheckDoor(DoorState);
        }
        AppState = WELCOME;
     f40:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__data_end>

        break;
     f44:	58 ce       	rjmp	.-848    	; 0xbf6 <main+0x64>

      case USER_SECOND_PAGE :
        H_Lcd_Clear();
     f46:	0e 94 30 0c 	call	0x1860	; 0x1860 <H_Lcd_Clear>
        H_Lcd_WriteString(" 1:Switch Relay ");
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
        H_Lcd_GoTo(1, 0);
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
        H_Lcd_WriteString("2:AcSwitch  3:OK");
     f5a:	89 ed       	ldi	r24, 0xD9	; 217
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 38 0c 	call	0x1870	; 0x1870 <H_Lcd_WriteString>
        KeyPressed = H_KeyPad_Read();
     f62:	0e 94 98 08 	call	0x1130	; 0x1130 <H_KeyPad_Read>
     f66:	18 2f       	mov	r17, r24
        while (!KeyPressed)
     f68:	16 c0       	rjmp	.+44     	; 0xf96 <main+0x404>
        {
          KeyPressed = H_KeyPad_Read();
     f6a:	0e 94 98 08 	call	0x1130	; 0x1130 <H_KeyPad_Read>
     f6e:	18 2f       	mov	r17, r24
          if (KeyPressed == '1')
     f70:	81 33       	cpi	r24, 0x31	; 49
     f72:	29 f4       	brne	.+10     	; 0xf7e <main+0x3ec>
          {
            RelaySwitch(&RelayState);
     f74:	ce 01       	movw	r24, r28
     f76:	0a 96       	adiw	r24, 0x0a	; 10
     f78:	0e 94 6f 04 	call	0x8de	; 0x8de <RelaySwitch>
     f7c:	0c c0       	rjmp	.+24     	; 0xf96 <main+0x404>
          }
          else if (KeyPressed == '2')
     f7e:	82 33       	cpi	r24, 0x32	; 50
     f80:	29 f4       	brne	.+10     	; 0xf8c <main+0x3fa>
          {
            ACSwitch(&ACState);
     f82:	ce 01       	movw	r24, r28
     f84:	09 96       	adiw	r24, 0x09	; 9
     f86:	0e 94 9e 04 	call	0x93c	; 0x93c <ACSwitch>
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <main+0x404>
          }
          else if (KeyPressed == '3')
     f8c:	83 33       	cpi	r24, 0x33	; 51
     f8e:	19 f4       	brne	.+6      	; 0xf96 <main+0x404>
          {
            AppState = IDLE_STATE;
     f90:	85 e0       	ldi	r24, 0x05	; 5
     f92:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
        H_Lcd_Clear();
        H_Lcd_WriteString(" 1:Switch Relay ");
        H_Lcd_GoTo(1, 0);
        H_Lcd_WriteString("2:AcSwitch  3:OK");
        KeyPressed = H_KeyPad_Read();
        while (!KeyPressed)
     f96:	11 23       	and	r17, r17
     f98:	41 f3       	breq	.-48     	; 0xf6a <main+0x3d8>
     f9a:	2d ce       	rjmp	.-934    	; 0xbf6 <main+0x64>

00000f9c <H_Buzzer_Init>:

#include "Buzzer.h"

void	H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZERPIN,OUTPUT);
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	8b e2       	ldi	r24, 0x2B	; 43
     fa0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
     fa4:	08 95       	ret

00000fa6 <H_Buzzer_On>:
}

void	H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZERPIN,HIGH);
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	8b e2       	ldi	r24, 0x2B	; 43
     faa:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
     fae:	08 95       	ret

00000fb0 <H_Buzzer_Off>:
}

void H_Buzzer_Off(void)
{
	M_Dio_PinWrite(BUZZERPIN,LOW);
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	8b e2       	ldi	r24, 0x2B	; 43
     fb4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
     fb8:	08 95       	ret

00000fba <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init				(void)
{
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	8e e2       	ldi	r24, 0x2E	; 46
     fbe:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_0,OUTPUT);
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	8c e2       	ldi	r24, 0x2C	; 44
     fc6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Pwm2_Init();
     fca:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <M_Pwm2_Init>
     fce:	08 95       	ret

00000fd0 <H_DcMotor_SetDirection>:
}


void H_DcMotor_SetDirection		(u8 Local_u8_Direction)
{
	M_Dio_PinWrite(DC_MOTOR_PIN_0,HIGH);
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	8c e2       	ldi	r24, 0x2C	; 44
     fd4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_1,LOW);	
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	8e e2       	ldi	r24, 0x2E	; 46
     fdc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
     fe0:	08 95       	ret

00000fe2 <H_DcMotor_Speed>:
}


void H_DcMotor_Speed			(u8 Local_u8_Speed)
{
	M_Pwm2_SetDutyCycle(Local_u8_Speed);
     fe2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <M_Pwm2_SetDutyCycle>
     fe6:	08 95       	ret

00000fe8 <H_DcMotor_Start>:
}


void H_DcMotor_Start			(void)
{
	M_Pwm2_Start();
     fe8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <M_Pwm2_Start>
     fec:	08 95       	ret

00000fee <H_DcMotor_Stop>:
}


void H_DcMotor_Stop				(void)
{
	M_Pwm2_Stop();
     fee:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <M_Pwm2_Stop>
     ff2:	08 95       	ret

00000ff4 <H_Eeprom_Init>:
 */ 
#include "Eeprom.h"

void H_Eeprom_Init(void)
{
	M_I2c_Init();
     ff4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <M_I2c_Init>
     ff8:	08 95       	ret

00000ffa <H_Eeprom_Write>:
}
void H_Eeprom_Write(u8 Local_u8_Data,u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	if(Local_u8_PageAddress < 8)
    1000:	68 30       	cpi	r22, 0x08	; 8
    1002:	88 f4       	brcc	.+34     	; 0x1026 <H_Eeprom_Write+0x2c>
    1004:	14 2f       	mov	r17, r20
    1006:	c6 2f       	mov	r28, r22
    1008:	d8 2f       	mov	r29, r24
	{
		M_I2c_StartCondition();
    100a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <M_I2c_StartCondition>
		M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
    100e:	8c 2f       	mov	r24, r28
    1010:	80 65       	ori	r24, 0x50	; 80
    1012:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <M_I2c_SendSlaveAddressWrite>
		M_I2c_SendSByte(Local_u8_ByteAddress);
    1016:	81 2f       	mov	r24, r17
    1018:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <M_I2c_SendSByte>
		M_I2c_SendSByte(Local_u8_Data);
    101c:	8d 2f       	mov	r24, r29
    101e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <M_I2c_SendSByte>
		M_I2c_StopCondition();
    1022:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <M_I2c_StopCondition>
	}
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	08 95       	ret

0000102e <H_Eeprom_Read>:
u8   H_Eeprom_Read(u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	c8 2f       	mov	r28, r24
    1034:	d6 2f       	mov	r29, r22
	u8 Local_u8_Data = 0;
	M_I2c_StartCondition();
    1036:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <M_I2c_StartCondition>
	M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
    103a:	c0 65       	ori	r28, 0x50	; 80
    103c:	8c 2f       	mov	r24, r28
    103e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <M_I2c_SendSlaveAddressWrite>
	M_I2c_SendSByte(Local_u8_ByteAddress);
    1042:	8d 2f       	mov	r24, r29
    1044:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <M_I2c_SendSByte>
	M_I2c_RepeatedStart();
    1048:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <M_I2c_RepeatedStart>
	M_I2c_SendSlaveAddressRead((0x50 | Local_u8_PageAddress));
    104c:	8c 2f       	mov	r24, r28
    104e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <M_I2c_SendSlaveAddressRead>
	Local_u8_Data = M_I2c_ReadByteNoAck();
    1052:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <M_I2c_ReadByteNoAck>
    1056:	c8 2f       	mov	r28, r24
	M_I2c_StopCondition();
    1058:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <M_I2c_StopCondition>
	return Local_u8_Data;
    105c:	8c 2f       	mov	r24, r28
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <H_Hc05_Init>:
 */ 
#include "Hc05.h"

void H_Hc05_Init(void)
{
	M_Uart_Init();
    1064:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <M_Uart_Init>
    1068:	08 95       	ret

0000106a <H_Hc05_Send>:
}
void H_Hc05_Send(u8 Local_u8_Data)
{
	M_Uart_Write(Local_u8_Data);
    106a:	0e 94 08 10 	call	0x2010	; 0x2010 <M_Uart_Write>
    106e:	08 95       	ret

00001070 <H_Hc05_SendString>:
}

void H_Hc05_SendString(u8* Local_u8_PtrToString)
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	8c 01       	movw	r16, r24
	u8 Local_u8_Counter = 0;
    1078:	c0 e0       	ldi	r28, 0x00	; 0
	u8 Local_u8_Data = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] !='\0')
    107a:	09 c0       	rjmp	.+18     	; 0x108e <H_Hc05_SendString+0x1e>
	{
		Local_u8_Data=Local_u8_PtrToString[Local_u8_Counter];
		H_Hc05_Send(Local_u8_Data);
    107c:	0e 94 35 08 	call	0x106a	; 0x106a <H_Hc05_Send>
    1080:	83 ed       	ldi	r24, 0xD3	; 211
    1082:	90 e3       	ldi	r25, 0x30	; 48
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <H_Hc05_SendString+0x14>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <H_Hc05_SendString+0x1a>
    108a:	00 00       	nop
		_delay_ms(50);
		Local_u8_Counter++;
    108c:	cf 5f       	subi	r28, 0xFF	; 255

void H_Hc05_SendString(u8* Local_u8_PtrToString)
{
	u8 Local_u8_Counter = 0;
	u8 Local_u8_Data = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] !='\0')
    108e:	f8 01       	movw	r30, r16
    1090:	ec 0f       	add	r30, r28
    1092:	f1 1d       	adc	r31, r1
    1094:	80 81       	ld	r24, Z
    1096:	81 11       	cpse	r24, r1
    1098:	f1 cf       	rjmp	.-30     	; 0x107c <H_Hc05_SendString+0xc>
		Local_u8_Data=Local_u8_PtrToString[Local_u8_Counter];
		H_Hc05_Send(Local_u8_Data);
		_delay_ms(50);
		Local_u8_Counter++;
	}
	H_Hc05_Send(13);
    109a:	8d e0       	ldi	r24, 0x0D	; 13
    109c:	0e 94 35 08 	call	0x106a	; 0x106a <H_Hc05_Send>
}
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <H_Hc05_Rec>:
u8   H_Hc05_Rec(void)
{
	u8 Local_u8_Data = 0;
	Local_u8_Data = M_Uart_Read();
    10a8:	0e 94 0c 10 	call	0x2018	; 0x2018 <M_Uart_Read>
	return Local_u8_Data;
    10ac:	08 95       	ret

000010ae <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	82 e2       	ldi	r24, 0x22	; 34
    10b2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	83 e2       	ldi	r24, 0x23	; 35
    10ba:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	84 e2       	ldi	r24, 0x24	; 36
    10c2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	85 e2       	ldi	r24, 0x25	; 37
    10ca:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	82 e2       	ldi	r24, 0x22	; 34
    10d2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	83 e2       	ldi	r24, 0x23	; 35
    10da:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	84 e2       	ldi	r24, 0x24	; 36
    10e2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	85 e2       	ldi	r24, 0x25	; 37
    10ea:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	8f e0       	ldi	r24, 0x0F	; 15
    10f2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	80 e1       	ldi	r24, 0x10	; 16
    10fa:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	81 e1       	ldi	r24, 0x11	; 17
    1102:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	87 e1       	ldi	r24, 0x17	; 23
    110a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	8f e0       	ldi	r24, 0x0F	; 15
    1112:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	80 e1       	ldi	r24, 0x10	; 16
    111a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	81 e1       	ldi	r24, 0x11	; 17
    1122:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	87 e1       	ldi	r24, 0x17	; 23
    112a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <M_Dio_PinPullUp>
    112e:	08 95       	ret

00001130 <H_KeyPad_Read>:
		
}
u8	 H_KeyPad_Read				(void)
{
    1130:	cf 93       	push	r28
	u8 Local_u8_KeyPadArr [4][4]	={	{'7','8','9','/'},
										{'4','5','6','*'},
										{'1','2','3','-'},										
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	82 e2       	ldi	r24, 0x22	; 34
    1136:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
    113a:	8f e0       	ldi	r24, 0x0F	; 15
    113c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1140:	81 11       	cpse	r24, r1
    1142:	19 c0       	rjmp	.+50     	; 0x1176 <H_KeyPad_Read+0x46>
    1144:	2f ef       	ldi	r18, 0xFF	; 255
    1146:	86 e7       	ldi	r24, 0x76	; 118
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	80 40       	sbci	r24, 0x00	; 0
    114e:	90 40       	sbci	r25, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <H_KeyPad_Read+0x1a>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <H_KeyPad_Read+0x24>
    1154:	00 00       	nop
    1156:	8f e0       	ldi	r24, 0x0F	; 15
    1158:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    115c:	81 11       	cpse	r24, r1
    115e:	0d c0       	rjmp	.+26     	; 0x117a <H_KeyPad_Read+0x4a>
    1160:	8f e0       	ldi	r24, 0x0F	; 15
    1162:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1166:	88 23       	and	r24, r24
    1168:	d9 f3       	breq	.-10     	; 0x1160 <H_KeyPad_Read+0x30>
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	82 e2       	ldi	r24, 0x22	; 34
    116e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1172:	c7 e3       	ldi	r28, 0x37	; 55
    1174:	03 c0       	rjmp	.+6      	; 0x117c <H_KeyPad_Read+0x4c>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
		
}
u8	 H_KeyPad_Read				(void)
{
	u8 Local_u8_KeypadReading		=	0;
    1176:	c0 e0       	ldi	r28, 0x00	; 0
    1178:	01 c0       	rjmp	.+2      	; 0x117c <H_KeyPad_Read+0x4c>
    117a:	c0 e0       	ldi	r28, 0x00	; 0
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][1];}}
    117c:	80 e1       	ldi	r24, 0x10	; 16
    117e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1182:	81 11       	cpse	r24, r1
    1184:	18 c0       	rjmp	.+48     	; 0x11b6 <H_KeyPad_Read+0x86>
    1186:	2f ef       	ldi	r18, 0xFF	; 255
    1188:	86 e7       	ldi	r24, 0x76	; 118
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	21 50       	subi	r18, 0x01	; 1
    118e:	80 40       	sbci	r24, 0x00	; 0
    1190:	90 40       	sbci	r25, 0x00	; 0
    1192:	e1 f7       	brne	.-8      	; 0x118c <H_KeyPad_Read+0x5c>
    1194:	00 c0       	rjmp	.+0      	; 0x1196 <H_KeyPad_Read+0x66>
    1196:	00 00       	nop
    1198:	80 e1       	ldi	r24, 0x10	; 16
    119a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    119e:	81 11       	cpse	r24, r1
    11a0:	0a c0       	rjmp	.+20     	; 0x11b6 <H_KeyPad_Read+0x86>
    11a2:	80 e1       	ldi	r24, 0x10	; 16
    11a4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    11a8:	88 23       	and	r24, r24
    11aa:	d9 f3       	breq	.-10     	; 0x11a2 <H_KeyPad_Read+0x72>
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	82 e2       	ldi	r24, 0x22	; 34
    11b0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    11b4:	c8 e3       	ldi	r28, 0x38	; 56
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][2];}}
    11b6:	81 e1       	ldi	r24, 0x11	; 17
    11b8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    11bc:	81 11       	cpse	r24, r1
    11be:	18 c0       	rjmp	.+48     	; 0x11f0 <H_KeyPad_Read+0xc0>
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	86 e7       	ldi	r24, 0x76	; 118
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	21 50       	subi	r18, 0x01	; 1
    11c8:	80 40       	sbci	r24, 0x00	; 0
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <H_KeyPad_Read+0x96>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <H_KeyPad_Read+0xa0>
    11d0:	00 00       	nop
    11d2:	81 e1       	ldi	r24, 0x11	; 17
    11d4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    11d8:	81 11       	cpse	r24, r1
    11da:	0a c0       	rjmp	.+20     	; 0x11f0 <H_KeyPad_Read+0xc0>
    11dc:	81 e1       	ldi	r24, 0x11	; 17
    11de:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    11e2:	88 23       	and	r24, r24
    11e4:	d9 f3       	breq	.-10     	; 0x11dc <H_KeyPad_Read+0xac>
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	82 e2       	ldi	r24, 0x22	; 34
    11ea:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    11ee:	c9 e3       	ldi	r28, 0x39	; 57
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][3];}}
    11f0:	87 e1       	ldi	r24, 0x17	; 23
    11f2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    11f6:	81 11       	cpse	r24, r1
    11f8:	18 c0       	rjmp	.+48     	; 0x122a <H_KeyPad_Read+0xfa>
    11fa:	2f ef       	ldi	r18, 0xFF	; 255
    11fc:	86 e7       	ldi	r24, 0x76	; 118
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	21 50       	subi	r18, 0x01	; 1
    1202:	80 40       	sbci	r24, 0x00	; 0
    1204:	90 40       	sbci	r25, 0x00	; 0
    1206:	e1 f7       	brne	.-8      	; 0x1200 <H_KeyPad_Read+0xd0>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <H_KeyPad_Read+0xda>
    120a:	00 00       	nop
    120c:	87 e1       	ldi	r24, 0x17	; 23
    120e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1212:	81 11       	cpse	r24, r1
    1214:	0a c0       	rjmp	.+20     	; 0x122a <H_KeyPad_Read+0xfa>
    1216:	87 e1       	ldi	r24, 0x17	; 23
    1218:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    121c:	88 23       	and	r24, r24
    121e:	d9 f3       	breq	.-10     	; 0x1216 <H_KeyPad_Read+0xe6>
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	82 e2       	ldi	r24, 0x22	; 34
    1224:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1228:	cf e2       	ldi	r28, 0x2F	; 47
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
    122a:	61 e0       	ldi	r22, 0x01	; 1
    122c:	82 e2       	ldi	r24, 0x22	; 34
    122e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,LOW);
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	83 e2       	ldi	r24, 0x23	; 35
    1236:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][0];}}
    123a:	8f e0       	ldi	r24, 0x0F	; 15
    123c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1240:	81 11       	cpse	r24, r1
    1242:	18 c0       	rjmp	.+48     	; 0x1274 <H_KeyPad_Read+0x144>
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	86 e7       	ldi	r24, 0x76	; 118
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	80 40       	sbci	r24, 0x00	; 0
    124e:	90 40       	sbci	r25, 0x00	; 0
    1250:	e1 f7       	brne	.-8      	; 0x124a <H_KeyPad_Read+0x11a>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <H_KeyPad_Read+0x124>
    1254:	00 00       	nop
    1256:	8f e0       	ldi	r24, 0x0F	; 15
    1258:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    125c:	81 11       	cpse	r24, r1
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <H_KeyPad_Read+0x144>
    1260:	8f e0       	ldi	r24, 0x0F	; 15
    1262:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1266:	88 23       	and	r24, r24
    1268:	d9 f3       	breq	.-10     	; 0x1260 <H_KeyPad_Read+0x130>
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	83 e2       	ldi	r24, 0x23	; 35
    126e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1272:	c4 e3       	ldi	r28, 0x34	; 52
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][1];}}
    1274:	80 e1       	ldi	r24, 0x10	; 16
    1276:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    127a:	81 11       	cpse	r24, r1
    127c:	18 c0       	rjmp	.+48     	; 0x12ae <H_KeyPad_Read+0x17e>
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	86 e7       	ldi	r24, 0x76	; 118
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	80 40       	sbci	r24, 0x00	; 0
    1288:	90 40       	sbci	r25, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <H_KeyPad_Read+0x154>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <H_KeyPad_Read+0x15e>
    128e:	00 00       	nop
    1290:	80 e1       	ldi	r24, 0x10	; 16
    1292:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1296:	81 11       	cpse	r24, r1
    1298:	0a c0       	rjmp	.+20     	; 0x12ae <H_KeyPad_Read+0x17e>
    129a:	80 e1       	ldi	r24, 0x10	; 16
    129c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    12a0:	88 23       	and	r24, r24
    12a2:	d9 f3       	breq	.-10     	; 0x129a <H_KeyPad_Read+0x16a>
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	83 e2       	ldi	r24, 0x23	; 35
    12a8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    12ac:	c5 e3       	ldi	r28, 0x35	; 53
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][2];}}
    12ae:	81 e1       	ldi	r24, 0x11	; 17
    12b0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    12b4:	81 11       	cpse	r24, r1
    12b6:	18 c0       	rjmp	.+48     	; 0x12e8 <H_KeyPad_Read+0x1b8>
    12b8:	2f ef       	ldi	r18, 0xFF	; 255
    12ba:	86 e7       	ldi	r24, 0x76	; 118
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	21 50       	subi	r18, 0x01	; 1
    12c0:	80 40       	sbci	r24, 0x00	; 0
    12c2:	90 40       	sbci	r25, 0x00	; 0
    12c4:	e1 f7       	brne	.-8      	; 0x12be <H_KeyPad_Read+0x18e>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <H_KeyPad_Read+0x198>
    12c8:	00 00       	nop
    12ca:	81 e1       	ldi	r24, 0x11	; 17
    12cc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    12d0:	81 11       	cpse	r24, r1
    12d2:	0a c0       	rjmp	.+20     	; 0x12e8 <H_KeyPad_Read+0x1b8>
    12d4:	81 e1       	ldi	r24, 0x11	; 17
    12d6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    12da:	88 23       	and	r24, r24
    12dc:	d9 f3       	breq	.-10     	; 0x12d4 <H_KeyPad_Read+0x1a4>
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	83 e2       	ldi	r24, 0x23	; 35
    12e2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    12e6:	c6 e3       	ldi	r28, 0x36	; 54
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][3];}}
    12e8:	87 e1       	ldi	r24, 0x17	; 23
    12ea:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    12ee:	81 11       	cpse	r24, r1
    12f0:	18 c0       	rjmp	.+48     	; 0x1322 <H_KeyPad_Read+0x1f2>
    12f2:	2f ef       	ldi	r18, 0xFF	; 255
    12f4:	86 e7       	ldi	r24, 0x76	; 118
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	21 50       	subi	r18, 0x01	; 1
    12fa:	80 40       	sbci	r24, 0x00	; 0
    12fc:	90 40       	sbci	r25, 0x00	; 0
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <H_KeyPad_Read+0x1c8>
    1300:	00 c0       	rjmp	.+0      	; 0x1302 <H_KeyPad_Read+0x1d2>
    1302:	00 00       	nop
    1304:	87 e1       	ldi	r24, 0x17	; 23
    1306:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    130a:	81 11       	cpse	r24, r1
    130c:	0a c0       	rjmp	.+20     	; 0x1322 <H_KeyPad_Read+0x1f2>
    130e:	87 e1       	ldi	r24, 0x17	; 23
    1310:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1314:	88 23       	and	r24, r24
    1316:	d9 f3       	breq	.-10     	; 0x130e <H_KeyPad_Read+0x1de>
    1318:	61 e0       	ldi	r22, 0x01	; 1
    131a:	83 e2       	ldi	r24, 0x23	; 35
    131c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1320:	ca e2       	ldi	r28, 0x2A	; 42
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	83 e2       	ldi	r24, 0x23	; 35
    1326:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,LOW);
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	84 e2       	ldi	r24, 0x24	; 36
    132e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
		
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][0];}}
    1332:	8f e0       	ldi	r24, 0x0F	; 15
    1334:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1338:	81 11       	cpse	r24, r1
    133a:	18 c0       	rjmp	.+48     	; 0x136c <H_KeyPad_Read+0x23c>
    133c:	2f ef       	ldi	r18, 0xFF	; 255
    133e:	86 e7       	ldi	r24, 0x76	; 118
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	21 50       	subi	r18, 0x01	; 1
    1344:	80 40       	sbci	r24, 0x00	; 0
    1346:	90 40       	sbci	r25, 0x00	; 0
    1348:	e1 f7       	brne	.-8      	; 0x1342 <H_KeyPad_Read+0x212>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <H_KeyPad_Read+0x21c>
    134c:	00 00       	nop
    134e:	8f e0       	ldi	r24, 0x0F	; 15
    1350:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1354:	81 11       	cpse	r24, r1
    1356:	0a c0       	rjmp	.+20     	; 0x136c <H_KeyPad_Read+0x23c>
    1358:	8f e0       	ldi	r24, 0x0F	; 15
    135a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    135e:	88 23       	and	r24, r24
    1360:	d9 f3       	breq	.-10     	; 0x1358 <H_KeyPad_Read+0x228>
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	84 e2       	ldi	r24, 0x24	; 36
    1366:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    136a:	c1 e3       	ldi	r28, 0x31	; 49
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][1];}}
    136c:	80 e1       	ldi	r24, 0x10	; 16
    136e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1372:	81 11       	cpse	r24, r1
    1374:	18 c0       	rjmp	.+48     	; 0x13a6 <H_KeyPad_Read+0x276>
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	86 e7       	ldi	r24, 0x76	; 118
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	80 40       	sbci	r24, 0x00	; 0
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	e1 f7       	brne	.-8      	; 0x137c <H_KeyPad_Read+0x24c>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <H_KeyPad_Read+0x256>
    1386:	00 00       	nop
    1388:	80 e1       	ldi	r24, 0x10	; 16
    138a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    138e:	81 11       	cpse	r24, r1
    1390:	0a c0       	rjmp	.+20     	; 0x13a6 <H_KeyPad_Read+0x276>
    1392:	80 e1       	ldi	r24, 0x10	; 16
    1394:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1398:	88 23       	and	r24, r24
    139a:	d9 f3       	breq	.-10     	; 0x1392 <H_KeyPad_Read+0x262>
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	84 e2       	ldi	r24, 0x24	; 36
    13a0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    13a4:	c2 e3       	ldi	r28, 0x32	; 50
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][2];}}
    13a6:	81 e1       	ldi	r24, 0x11	; 17
    13a8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    13ac:	81 11       	cpse	r24, r1
    13ae:	18 c0       	rjmp	.+48     	; 0x13e0 <H_KeyPad_Read+0x2b0>
    13b0:	2f ef       	ldi	r18, 0xFF	; 255
    13b2:	86 e7       	ldi	r24, 0x76	; 118
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	21 50       	subi	r18, 0x01	; 1
    13b8:	80 40       	sbci	r24, 0x00	; 0
    13ba:	90 40       	sbci	r25, 0x00	; 0
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <H_KeyPad_Read+0x286>
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <H_KeyPad_Read+0x290>
    13c0:	00 00       	nop
    13c2:	81 e1       	ldi	r24, 0x11	; 17
    13c4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    13c8:	81 11       	cpse	r24, r1
    13ca:	0a c0       	rjmp	.+20     	; 0x13e0 <H_KeyPad_Read+0x2b0>
    13cc:	81 e1       	ldi	r24, 0x11	; 17
    13ce:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    13d2:	88 23       	and	r24, r24
    13d4:	d9 f3       	breq	.-10     	; 0x13cc <H_KeyPad_Read+0x29c>
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	84 e2       	ldi	r24, 0x24	; 36
    13da:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    13de:	c3 e3       	ldi	r28, 0x33	; 51
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][3];}}
    13e0:	87 e1       	ldi	r24, 0x17	; 23
    13e2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    13e6:	81 11       	cpse	r24, r1
    13e8:	18 c0       	rjmp	.+48     	; 0x141a <H_KeyPad_Read+0x2ea>
    13ea:	2f ef       	ldi	r18, 0xFF	; 255
    13ec:	86 e7       	ldi	r24, 0x76	; 118
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	21 50       	subi	r18, 0x01	; 1
    13f2:	80 40       	sbci	r24, 0x00	; 0
    13f4:	90 40       	sbci	r25, 0x00	; 0
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <H_KeyPad_Read+0x2c0>
    13f8:	00 c0       	rjmp	.+0      	; 0x13fa <H_KeyPad_Read+0x2ca>
    13fa:	00 00       	nop
    13fc:	87 e1       	ldi	r24, 0x17	; 23
    13fe:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1402:	81 11       	cpse	r24, r1
    1404:	0a c0       	rjmp	.+20     	; 0x141a <H_KeyPad_Read+0x2ea>
    1406:	87 e1       	ldi	r24, 0x17	; 23
    1408:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    140c:	88 23       	and	r24, r24
    140e:	d9 f3       	breq	.-10     	; 0x1406 <H_KeyPad_Read+0x2d6>
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	84 e2       	ldi	r24, 0x24	; 36
    1414:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1418:	cd e2       	ldi	r28, 0x2D	; 45
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	84 e2       	ldi	r24, 0x24	; 36
    141e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
				
	M_Dio_PinWrite(KEYPAD_R3_PIN,LOW);
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	85 e2       	ldi	r24, 0x25	; 37
    1426:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][0];}}
    142a:	8f e0       	ldi	r24, 0x0F	; 15
    142c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1430:	81 11       	cpse	r24, r1
    1432:	18 c0       	rjmp	.+48     	; 0x1464 <H_KeyPad_Read+0x334>
    1434:	2f ef       	ldi	r18, 0xFF	; 255
    1436:	86 e7       	ldi	r24, 0x76	; 118
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	21 50       	subi	r18, 0x01	; 1
    143c:	80 40       	sbci	r24, 0x00	; 0
    143e:	90 40       	sbci	r25, 0x00	; 0
    1440:	e1 f7       	brne	.-8      	; 0x143a <H_KeyPad_Read+0x30a>
    1442:	00 c0       	rjmp	.+0      	; 0x1444 <H_KeyPad_Read+0x314>
    1444:	00 00       	nop
    1446:	8f e0       	ldi	r24, 0x0F	; 15
    1448:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    144c:	81 11       	cpse	r24, r1
    144e:	0a c0       	rjmp	.+20     	; 0x1464 <H_KeyPad_Read+0x334>
    1450:	8f e0       	ldi	r24, 0x0F	; 15
    1452:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1456:	88 23       	and	r24, r24
    1458:	d9 f3       	breq	.-10     	; 0x1450 <H_KeyPad_Read+0x320>
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	85 e2       	ldi	r24, 0x25	; 37
    145e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1462:	c3 e4       	ldi	r28, 0x43	; 67
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][1];}}
    1464:	80 e1       	ldi	r24, 0x10	; 16
    1466:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    146a:	81 11       	cpse	r24, r1
    146c:	18 c0       	rjmp	.+48     	; 0x149e <H_KeyPad_Read+0x36e>
    146e:	2f ef       	ldi	r18, 0xFF	; 255
    1470:	86 e7       	ldi	r24, 0x76	; 118
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	80 40       	sbci	r24, 0x00	; 0
    1478:	90 40       	sbci	r25, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <H_KeyPad_Read+0x344>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <H_KeyPad_Read+0x34e>
    147e:	00 00       	nop
    1480:	80 e1       	ldi	r24, 0x10	; 16
    1482:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1486:	81 11       	cpse	r24, r1
    1488:	0a c0       	rjmp	.+20     	; 0x149e <H_KeyPad_Read+0x36e>
    148a:	80 e1       	ldi	r24, 0x10	; 16
    148c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1490:	88 23       	and	r24, r24
    1492:	d9 f3       	breq	.-10     	; 0x148a <H_KeyPad_Read+0x35a>
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	85 e2       	ldi	r24, 0x25	; 37
    1498:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    149c:	c0 e3       	ldi	r28, 0x30	; 48
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][2];}}
    149e:	81 e1       	ldi	r24, 0x11	; 17
    14a0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    14a4:	81 11       	cpse	r24, r1
    14a6:	18 c0       	rjmp	.+48     	; 0x14d8 <H_KeyPad_Read+0x3a8>
    14a8:	2f ef       	ldi	r18, 0xFF	; 255
    14aa:	86 e7       	ldi	r24, 0x76	; 118
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	21 50       	subi	r18, 0x01	; 1
    14b0:	80 40       	sbci	r24, 0x00	; 0
    14b2:	90 40       	sbci	r25, 0x00	; 0
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <H_KeyPad_Read+0x37e>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <H_KeyPad_Read+0x388>
    14b8:	00 00       	nop
    14ba:	81 e1       	ldi	r24, 0x11	; 17
    14bc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    14c0:	81 11       	cpse	r24, r1
    14c2:	0a c0       	rjmp	.+20     	; 0x14d8 <H_KeyPad_Read+0x3a8>
    14c4:	81 e1       	ldi	r24, 0x11	; 17
    14c6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    14ca:	88 23       	and	r24, r24
    14cc:	d9 f3       	breq	.-10     	; 0x14c4 <H_KeyPad_Read+0x394>
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	85 e2       	ldi	r24, 0x25	; 37
    14d2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    14d6:	cd e3       	ldi	r28, 0x3D	; 61
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][3];}}
    14d8:	87 e1       	ldi	r24, 0x17	; 23
    14da:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    14de:	81 11       	cpse	r24, r1
    14e0:	18 c0       	rjmp	.+48     	; 0x1512 <H_KeyPad_Read+0x3e2>
    14e2:	2f ef       	ldi	r18, 0xFF	; 255
    14e4:	86 e7       	ldi	r24, 0x76	; 118
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	80 40       	sbci	r24, 0x00	; 0
    14ec:	90 40       	sbci	r25, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <H_KeyPad_Read+0x3b8>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <H_KeyPad_Read+0x3c2>
    14f2:	00 00       	nop
    14f4:	87 e1       	ldi	r24, 0x17	; 23
    14f6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    14fa:	81 11       	cpse	r24, r1
    14fc:	0a c0       	rjmp	.+20     	; 0x1512 <H_KeyPad_Read+0x3e2>
    14fe:	87 e1       	ldi	r24, 0x17	; 23
    1500:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    1504:	88 23       	and	r24, r24
    1506:	d9 f3       	breq	.-10     	; 0x14fe <H_KeyPad_Read+0x3ce>
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	85 e2       	ldi	r24, 0x25	; 37
    150c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1510:	cb e2       	ldi	r28, 0x2B	; 43
	
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	85 e2       	ldi	r24, 0x25	; 37
    1516:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	
	return Local_u8_KeypadReading ;
    151a:	8c 2f       	mov	r24, r28
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <H_Lcd_WriteCharacter>:
// 	#endif
// }


void H_Lcd_WriteCharacter	(u8 Local_u8_Character)
{
    1520:	cf 93       	push	r28
    1522:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	84 e1       	ldi	r24, 0x14	; 20
    1528:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	#elif		LCD_MODE	==	_4_BIT_MODE
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character & 0XF0);	
    152c:	88 b3       	in	r24, 0x18	; 24
    152e:	8f 70       	andi	r24, 0x0F	; 15
    1530:	9c 2f       	mov	r25, r28
    1532:	90 7f       	andi	r25, 0xF0	; 240
    1534:	89 2b       	or	r24, r25
    1536:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	86 e1       	ldi	r24, 0x16	; 22
    153c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1540:	8f e9       	ldi	r24, 0x9F	; 159
    1542:	9f e0       	ldi	r25, 0x0F	; 15
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <H_Lcd_WriteCharacter+0x24>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <H_Lcd_WriteCharacter+0x2a>
    154a:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	86 e1       	ldi	r24, 0x16	; 22
    1550:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character << 4);
    1554:	28 b3       	in	r18, 0x18	; 24
    1556:	30 e1       	ldi	r19, 0x10	; 16
    1558:	c3 9f       	mul	r28, r19
    155a:	c0 01       	movw	r24, r0
    155c:	11 24       	eor	r1, r1
    155e:	92 2f       	mov	r25, r18
    1560:	9f 70       	andi	r25, 0x0F	; 15
    1562:	89 2b       	or	r24, r25
    1564:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	86 e1       	ldi	r24, 0x16	; 22
    156a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    156e:	8f e9       	ldi	r24, 0x9F	; 159
    1570:	9f e0       	ldi	r25, 0x0F	; 15
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <H_Lcd_WriteCharacter+0x52>
    1576:	00 c0       	rjmp	.+0      	; 0x1578 <H_Lcd_WriteCharacter+0x58>
    1578:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	86 e1       	ldi	r24, 0x16	; 22
    157e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	#endif 

	
}
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <H_Lcd_WriteCommand>:
// 	#endif
// }


void H_Lcd_WriteCommand		(u8 Local_u8_Command)
{
    1586:	cf 93       	push	r28
    1588:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	84 e1       	ldi	r24, 0x14	; 20
    158e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	
	#elif		LCD_MODE	==	_4_BIT_MODE
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command & 0XF0);
    1592:	88 b3       	in	r24, 0x18	; 24
    1594:	8f 70       	andi	r24, 0x0F	; 15
    1596:	9c 2f       	mov	r25, r28
    1598:	90 7f       	andi	r25, 0xF0	; 240
    159a:	89 2b       	or	r24, r25
    159c:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	86 e1       	ldi	r24, 0x16	; 22
    15a2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    15a6:	8f e9       	ldi	r24, 0x9F	; 159
    15a8:	9f e0       	ldi	r25, 0x0F	; 15
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <H_Lcd_WriteCommand+0x24>
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <H_Lcd_WriteCommand+0x2a>
    15b0:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	86 e1       	ldi	r24, 0x16	; 22
    15b6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    15ba:	8f e1       	ldi	r24, 0x1F	; 31
    15bc:	9e e4       	ldi	r25, 0x4E	; 78
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <H_Lcd_WriteCommand+0x38>
    15c2:	00 c0       	rjmp	.+0      	; 0x15c4 <H_Lcd_WriteCommand+0x3e>
    15c4:	00 00       	nop
	_delay_ms(5);

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command << 4);
    15c6:	28 b3       	in	r18, 0x18	; 24
    15c8:	30 e1       	ldi	r19, 0x10	; 16
    15ca:	c3 9f       	mul	r28, r19
    15cc:	c0 01       	movw	r24, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	92 2f       	mov	r25, r18
    15d2:	9f 70       	andi	r25, 0x0F	; 15
    15d4:	89 2b       	or	r24, r25
    15d6:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	86 e1       	ldi	r24, 0x16	; 22
    15dc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    15e0:	8f e9       	ldi	r24, 0x9F	; 159
    15e2:	9f e0       	ldi	r25, 0x0F	; 15
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <H_Lcd_WriteCommand+0x5e>
    15e8:	00 c0       	rjmp	.+0      	; 0x15ea <H_Lcd_WriteCommand+0x64>
    15ea:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	86 e1       	ldi	r24, 0x16	; 22
    15f0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    15f4:	8f e1       	ldi	r24, 0x1F	; 31
    15f6:	9e e4       	ldi	r25, 0x4E	; 78
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <H_Lcd_WriteCommand+0x72>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <H_Lcd_WriteCommand+0x78>
    15fe:	00 00       	nop
	_delay_ms(5);
	#endif

}
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <H_Lcd_Init>:
	M_Dio_PinMode(LCD_DATA_1_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_2_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_3_PIN,OUTPUT);
	#elif	LCD_MODE	==	_4_BIT_MODE
	#endif
	M_Dio_PinMode(LCD_DATA_4_PIN,OUTPUT);
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	88 e1       	ldi	r24, 0x18	; 24
    1608:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_5_PIN,OUTPUT);
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	89 e1       	ldi	r24, 0x19	; 25
    1610:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_6_PIN,OUTPUT);
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	8a e1       	ldi	r24, 0x1A	; 26
    1618:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_7_PIN,OUTPUT);
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	8b e1       	ldi	r24, 0x1B	; 27
    1620:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	84 e1       	ldi	r24, 0x14	; 20
    1628:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	85 e1       	ldi	r24, 0x15	; 21
    1630:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);	
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	86 e1       	ldi	r24, 0x16	; 22
    1638:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
    163c:	2f ef       	ldi	r18, 0xFF	; 255
    163e:	83 ed       	ldi	r24, 0xD3	; 211
    1640:	90 e3       	ldi	r25, 0x30	; 48
    1642:	21 50       	subi	r18, 0x01	; 1
    1644:	80 40       	sbci	r24, 0x00	; 0
    1646:	90 40       	sbci	r25, 0x00	; 0
    1648:	e1 f7       	brne	.-8      	; 0x1642 <H_Lcd_Init+0x3e>
    164a:	00 c0       	rjmp	.+0      	; 0x164c <H_Lcd_Init+0x48>
    164c:	00 00       	nop
	_delay_ms(1000);
	
	#if			LCD_MODE	==	_8_BIT_MODE	
	H_Lcd_WriteCommand(LCD_CMD_SELECT_8_BIT_MODE);				// to select 8 bit mode
	#elif		LCD_MODE	==	_4_BIT_MODE	
	H_Lcd_WriteCommand(0X33);
    164e:	83 e3       	ldi	r24, 0x33	; 51
    1650:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0X32);
    1654:	82 e3       	ldi	r24, 0x32	; 50
    1656:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_SELECT_4_BIT_MODE);				// to select 4 bit mode
    165a:	88 e2       	ldi	r24, 0x28	; 40
    165c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
	#endif		
	H_Lcd_WriteCommand(LCD_CMD_DISPLAY_ON_CURSOR_OFF);			// to Display ON, cursor OFF
    1660:	8c e0       	ldi	r24, 0x0C	; 12
    1662:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);							// to clear LCD
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_RETURN_HOME);					// to return home
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
    1672:	08 95       	ret

00001674 <H_Lcd_WriteNumber>:
// 	_delay_ms(5);
// 	#endif
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
    1674:	3f 92       	push	r3
    1676:	4f 92       	push	r4
    1678:	5f 92       	push	r5
    167a:	6f 92       	push	r6
    167c:	7f 92       	push	r7
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	00 d0       	rcall	.+0      	; 0x1698 <H_Lcd_WriteNumber+0x24>
    1698:	00 d0       	rcall	.+0      	; 0x169a <H_Lcd_WriteNumber+0x26>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	4b 01       	movw	r8, r22
    16a0:	5c 01       	movw	r10, r24
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    16a2:	2d b7       	in	r18, 0x3d	; 61
    16a4:	3e b7       	in	r19, 0x3e	; 62
    16a6:	3a 83       	std	Y+2, r19	; 0x02
    16a8:	29 83       	std	Y+1, r18	; 0x01
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
 	s32 check_reminder = Local_s32_Number;
 	if (Local_s32_Number == 0)
    16aa:	67 2b       	or	r22, r23
    16ac:	68 2b       	or	r22, r24
    16ae:	69 2b       	or	r22, r25
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <H_Lcd_WriteNumber+0x44>
 	{
 		H_Lcd_WriteCharacter('0');
    16b2:	80 e3       	ldi	r24, 0x30	; 48
    16b4:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
 	}
 	check_reminder*=1000;
    16b8:	a8 ee       	ldi	r26, 0xE8	; 232
    16ba:	b3 e0       	ldi	r27, 0x03	; 3
    16bc:	a5 01       	movw	r20, r10
    16be:	94 01       	movw	r18, r8
    16c0:	0e 94 83 12 	call	0x2506	; 0x2506 <__muluhisi3>
 	
 	if ((check_reminder % 1000)== 0)
    16c4:	28 ee       	ldi	r18, 0xE8	; 232
    16c6:	33 e0       	ldi	r19, 0x03	; 3
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	0e 94 4f 12 	call	0x249e	; 0x249e <__divmodsi4>
    16d0:	67 2b       	or	r22, r23
    16d2:	68 2b       	or	r22, r24
    16d4:	69 2b       	or	r22, r25
    16d6:	09 f0       	breq	.+2      	; 0x16da <H_Lcd_WriteNumber+0x66>
    16d8:	8e c0       	rjmp	.+284    	; 0x17f6 <H_Lcd_WriteNumber+0x182>
 	{
 		if (Local_s32_Number < 0)
    16da:	bb 20       	and	r11, r11
    16dc:	5c f4       	brge	.+22     	; 0x16f4 <H_Lcd_WriteNumber+0x80>
 		{
 		
 			H_Lcd_WriteCharacter('-');
    16de:	8d e2       	ldi	r24, 0x2D	; 45
    16e0:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
 			Local_s32_Number = Local_s32_Number * -1;
    16e4:	b0 94       	com	r11
    16e6:	a0 94       	com	r10
    16e8:	90 94       	com	r9
    16ea:	80 94       	com	r8
    16ec:	81 1c       	adc	r8, r1
    16ee:	91 1c       	adc	r9, r1
    16f0:	a1 1c       	adc	r10, r1
    16f2:	b1 1c       	adc	r11, r1
 		}
 		if (Local_s32_Number > 0)
    16f4:	18 14       	cp	r1, r8
    16f6:	19 04       	cpc	r1, r9
    16f8:	1a 04       	cpc	r1, r10
    16fa:	1b 04       	cpc	r1, r11
    16fc:	0c f0       	brlt	.+2      	; 0x1700 <H_Lcd_WriteNumber+0x8c>
    16fe:	7b c0       	rjmp	.+246    	; 0x17f6 <H_Lcd_WriteNumber+0x182>
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
    1700:	a5 01       	movw	r20, r10
    1702:	94 01       	movw	r18, r8
 			u8  Local_u8_DigitCounter = 0;
    1704:	31 2c       	mov	r3, r1
 			while (Local_u32_Printed_Number)
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <H_Lcd_WriteNumber+0xb0>
 			{
 				if (Local_u32_Printed_Number)
    1708:	21 15       	cp	r18, r1
    170a:	31 05       	cpc	r19, r1
    170c:	41 05       	cpc	r20, r1
    170e:	51 05       	cpc	r21, r1
    1710:	49 f0       	breq	.+18     	; 0x1724 <H_Lcd_WriteNumber+0xb0>
 				{
 					Local_u32_Printed_Number/= 10;
    1712:	ca 01       	movw	r24, r20
    1714:	b9 01       	movw	r22, r18
    1716:	2a e0       	ldi	r18, 0x0A	; 10
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	0e 94 2d 12 	call	0x245a	; 0x245a <__udivmodsi4>
 					Local_u8_DigitCounter++;
    1722:	33 94       	inc	r3
 		}
 		if (Local_s32_Number > 0)
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
 			u8  Local_u8_DigitCounter = 0;
 			while (Local_u32_Printed_Number)
    1724:	21 15       	cp	r18, r1
    1726:	31 05       	cpc	r19, r1
    1728:	41 05       	cpc	r20, r1
    172a:	51 05       	cpc	r21, r1
    172c:	69 f7       	brne	.-38     	; 0x1708 <H_Lcd_WriteNumber+0x94>
 					Local_u32_Printed_Number/= 10;
 					Local_u8_DigitCounter++;
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
    172e:	8d b7       	in	r24, 0x3d	; 61
    1730:	9e b7       	in	r25, 0x3e	; 62
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
    1736:	83 2d       	mov	r24, r3
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	2d b7       	in	r18, 0x3d	; 61
    1744:	3e b7       	in	r19, 0x3e	; 62
    1746:	28 1b       	sub	r18, r24
    1748:	39 0b       	sbc	r19, r25
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	3e bf       	out	0x3e, r19	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	2d bf       	out	0x3d, r18	; 61
    1754:	0d b7       	in	r16, 0x3d	; 61
    1756:	1e b7       	in	r17, 0x3e	; 62
    1758:	0f 5f       	subi	r16, 0xFF	; 255
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
 			u32 Local_u8_ArrCounter = 0;
    175c:	41 2c       	mov	r4, r1
    175e:	51 2c       	mov	r5, r1
    1760:	32 01       	movw	r6, r4
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    1762:	20 c0       	rjmp	.+64     	; 0x17a4 <H_Lcd_WriteNumber+0x130>
 			{
 				Local_u8_ArrCounter ++;
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	43 1a       	sub	r4, r19
    1768:	53 0a       	sbc	r5, r19
    176a:	63 0a       	sbc	r6, r19
    176c:	73 0a       	sbc	r7, r19
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
    176e:	c4 18       	sub	r12, r4
    1770:	d5 08       	sbc	r13, r5
    1772:	e6 08       	sbc	r14, r6
    1774:	f7 08       	sbc	r15, r7
    1776:	c5 01       	movw	r24, r10
    1778:	b4 01       	movw	r22, r8
    177a:	2a e0       	ldi	r18, 0x0A	; 10
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	0e 94 4f 12 	call	0x249e	; 0x249e <__divmodsi4>
    1786:	cc 0c       	add	r12, r12
    1788:	dd 1c       	adc	r13, r13
    178a:	cc 0c       	add	r12, r12
    178c:	dd 1c       	adc	r13, r13
    178e:	f8 01       	movw	r30, r16
    1790:	ec 0d       	add	r30, r12
    1792:	fd 1d       	adc	r31, r13
    1794:	60 83       	st	Z, r22
    1796:	71 83       	std	Z+1, r23	; 0x01
    1798:	82 83       	std	Z+2, r24	; 0x02
    179a:	93 83       	std	Z+3, r25	; 0x03
 				Local_s32_Number /= 10;
    179c:	82 2e       	mov	r8, r18
    179e:	93 2e       	mov	r9, r19
    17a0:	a4 2e       	mov	r10, r20
    17a2:	b5 2e       	mov	r11, r21
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
 			u32 Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    17a4:	c3 2c       	mov	r12, r3
    17a6:	d1 2c       	mov	r13, r1
    17a8:	e1 2c       	mov	r14, r1
    17aa:	f1 2c       	mov	r15, r1
    17ac:	4c 14       	cp	r4, r12
    17ae:	5d 04       	cpc	r5, r13
    17b0:	6e 04       	cpc	r6, r14
    17b2:	7f 04       	cpc	r7, r15
    17b4:	b8 f2       	brcs	.-82     	; 0x1764 <H_Lcd_WriteNumber+0xf0>
    17b6:	81 2c       	mov	r8, r1
    17b8:	91 2c       	mov	r9, r1
    17ba:	54 01       	movw	r10, r8
    17bc:	10 c0       	rjmp	.+32     	; 0x17de <H_Lcd_WriteNumber+0x16a>
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
 			{
 				H_Lcd_WriteCharacter(arr[Local_u8_ArrCounter]+48);
    17be:	f4 01       	movw	r30, r8
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	e0 0f       	add	r30, r16
    17ca:	f1 1f       	adc	r31, r17
    17cc:	80 81       	ld	r24, Z
    17ce:	80 5d       	subi	r24, 0xD0	; 208
    17d0:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
 				Local_u8_ArrCounter++;
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	88 1a       	sub	r8, r24
    17d8:	98 0a       	sbc	r9, r24
    17da:	a8 0a       	sbc	r10, r24
    17dc:	b8 0a       	sbc	r11, r24
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
 				Local_s32_Number /= 10;
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    17de:	8c 14       	cp	r8, r12
    17e0:	9d 04       	cpc	r9, r13
    17e2:	ae 04       	cpc	r10, r14
    17e4:	bf 04       	cpc	r11, r15
    17e6:	58 f3       	brcs	.-42     	; 0x17be <H_Lcd_WriteNumber+0x14a>
    17e8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ea:	3c 81       	ldd	r19, Y+4	; 0x04
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	3e bf       	out	0x3e, r19	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	2d bf       	out	0x3d, r18	; 61
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	9e bf       	out	0x3e, r25	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	8d bf       	out	0x3d, r24	; 61
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	8f 90       	pop	r8
    1824:	7f 90       	pop	r7
    1826:	6f 90       	pop	r6
    1828:	5f 90       	pop	r5
    182a:	4f 90       	pop	r4
    182c:	3f 90       	pop	r3
    182e:	08 95       	ret

00001830 <H_Lcd_GoTo>:
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
	H_Lcd_GoTo(0,0);
}

void H_Lcd_GoTo	(u8 Local_u8_Row,u8 Local_u8_Coloumn )
{
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	00 d0       	rcall	.+0      	; 0x1836 <H_Lcd_GoTo+0x6>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
	u8 arr [2] = {LCD_CMD_FIRST_ROW, LCD_CMD_SECOND_ROW};
    183a:	90 e8       	ldi	r25, 0x80	; 128
    183c:	99 83       	std	Y+1, r25	; 0x01
    183e:	90 ec       	ldi	r25, 0xC0	; 192
    1840:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
    1842:	e1 e0       	ldi	r30, 0x01	; 1
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	ec 0f       	add	r30, r28
    1848:	fd 1f       	adc	r31, r29
    184a:	e8 0f       	add	r30, r24
    184c:	f1 1d       	adc	r31, r1
    184e:	80 81       	ld	r24, Z
    1850:	86 0f       	add	r24, r22
    1852:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
	
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <H_Lcd_Clear>:
// }

void H_Lcd_Clear (void)
{
	
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0e 94 c3 0a 	call	0x1586	; 0x1586 <H_Lcd_WriteCommand>
	H_Lcd_GoTo(0,0);
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
    186e:	08 95       	ret

00001870 <H_Lcd_WriteString>:
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
	
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	8c 01       	movw	r16, r24
	u8 Local_u8_Counter = 0;
    1878:	c0 e0       	ldi	r28, 0x00	; 0
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    187a:	09 c0       	rjmp	.+18     	; 0x188e <H_Lcd_WriteString+0x1e>
	{
		H_Lcd_WriteCharacter(Local_u8_PtrToString[Local_u8_Counter]);
    187c:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
    1880:	cf 5f       	subi	r28, 0xFF	; 255
		if (Local_u8_Counter == 16)
    1882:	c0 31       	cpi	r28, 0x10	; 16
    1884:	21 f4       	brne	.+8      	; 0x188e <H_Lcd_WriteString+0x1e>
		{
			H_Lcd_GoTo(1,0);
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 18 0c 	call	0x1830	; 0x1830 <H_Lcd_GoTo>
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
	u8 Local_u8_Counter = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    188e:	f8 01       	movw	r30, r16
    1890:	ec 0f       	add	r30, r28
    1892:	f1 1d       	adc	r31, r1
    1894:	80 81       	ld	r24, Z
    1896:	81 11       	cpse	r24, r1
    1898:	f1 cf       	rjmp	.-30     	; 0x187c <H_Lcd_WriteString+0xc>
		if (Local_u8_Counter == 16)
		{
			H_Lcd_GoTo(1,0);
		}
	}
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <H_Led_Init>:

#include "Led.h"

void	H_Led_Init(u8 Local_u8_Led_Number)
{	
	M_Dio_PinMode(Local_u8_Led_Number,OUTPUT);		
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
    18a8:	08 95       	ret

000018aa <H_Led_On>:
}

void	H_Led_On(u8 Local_u8_Led_Number)
{
	M_Dio_PinWrite(Local_u8_Led_Number,HIGH);
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    18b0:	08 95       	ret

000018b2 <H_Led_Off>:
}

void H_Led_Off(u8 Local_u8_Led_Number)
{
	M_Dio_PinWrite(Local_u8_Led_Number,LOW);
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    18b8:	08 95       	ret

000018ba <H_Lm35_Init>:

#include "Lm35.h"

void H_Lm35_Init				(void)
{
	M_Adc_Init();
    18ba:	0e 94 a9 0c 	call	0x1952	; 0x1952 <M_Adc_Init>
    18be:	08 95       	ret

000018c0 <H_Lm35_Read>:
}
u16  H_Lm35_Read				(void)
{
	u16 Local_u16_ADCReading	=	M_Adc_Read();
    18c0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <M_Adc_Read>
	u16 Local_u16_Temp			=	(((u32)Local_u16_ADCReading * 500)/1023);
    18c4:	9c 01       	movw	r18, r24
    18c6:	a4 ef       	ldi	r26, 0xF4	; 244
    18c8:	b1 e0       	ldi	r27, 0x01	; 1
    18ca:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__umulhisi3>
    18ce:	2f ef       	ldi	r18, 0xFF	; 255
    18d0:	33 e0       	ldi	r19, 0x03	; 3
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	0e 94 2d 12 	call	0x245a	; 0x245a <__udivmodsi4>
	return Local_u16_Temp;
    18da:	c9 01       	movw	r24, r18
    18dc:	08 95       	ret

000018de <H_PushButton_Init>:
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	8a e2       	ldi	r24, 0x2A	; 42
    18e2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
    18e6:	08 95       	ret

000018e8 <H_PushButton_Read>:
    18e8:	8a e2       	ldi	r24, 0x2A	; 42
    18ea:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <M_Dio_PinRead>
    18ee:	08 95       	ret

000018f0 <H_Relay_Init>:

#include "Relay.h"

void	H_Relay_Init		(void)
{
	M_Dio_PinMode(RELAY_PIN,OUTPUT);	
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	8e e0       	ldi	r24, 0x0E	; 14
    18f4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
    18f8:	08 95       	ret

000018fa <H_Relay_On>:
}

void	H_Relay_On			(void)
{
	M_Dio_PinWrite(RELAY_PIN,HIGH);
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	8e e0       	ldi	r24, 0x0E	; 14
    18fe:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    1902:	08 95       	ret

00001904 <H_Relay_Off>:
}

void	H_Relay_Off		    (void)
{
	M_Dio_PinWrite(RELAY_PIN,LOW);
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	8e e0       	ldi	r24, 0x0E	; 14
    1908:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <M_Dio_PinWrite>
    190c:	08 95       	ret

0000190e <H_Servo_Init>:
	so I initialized an output pwm signal with frequency 50 hz
*/
void H_Servo_Init		(void)
{
	/*To Set Control Pin as Output*/
	M_Dio_PinMode(SERVO_OUTPUT_PIN, OUTPUT);
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	8d e2       	ldi	r24, 0x2D	; 45
    1912:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	
	/*To initialize PWM*/
	M_Pwm1_Init();
    1916:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <M_Pwm1_Init>
		
	/*To set working Frequency*/
	M_Pwm1_SetFrequency(50);
    191a:	82 e3       	ldi	r24, 0x32	; 50
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <M_Pwm1_SetFrequency>
    1922:	08 95       	ret

00001924 <H_Servo_SetAngel>:
/*To set desired angel for the servo step, Servo usually works from 5% to 10% duty cycle so I mapped 0-180 degrees to 5%-10% */
void H_Servo_SetAngel	(f32 Local_f32_DesiredAngel)
{
	/*scaling from 180 degrees to 5 to 10 Percents*/
 	
	Local_f32_DesiredAngel *= 5;
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 ea       	ldi	r20, 0xA0	; 160
    192a:	50 e4       	ldi	r21, 0x40	; 64
    192c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
 	Local_f32_DesiredAngel /= 180;
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	44 e3       	ldi	r20, 0x34	; 52
    1936:	53 e4       	ldi	r21, 0x43	; 67
    1938:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__divsf3>
	Local_f32_DesiredAngel += 5;
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 ea       	ldi	r20, 0xA0	; 160
    1942:	50 e4       	ldi	r21, 0x40	; 64
    1944:	0e 94 11 10 	call	0x2022	; 0x2022 <__addsf3>
	 
	/*to set PWM Duty Cycle*/
 	M_Pwm1_SetDutyCycle(Local_f32_DesiredAngel);
    1948:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <M_Pwm1_SetDutyCycle>
	 
	/*To start the clock*/
 	M_Pwm1_Start();
    194c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <M_Pwm1_Start>
    1950:	08 95       	ret

00001952 <M_Adc_Init>:
void (* Adc_void_CallBack) (void);

void M_Adc_Init (void)
{
	
	M_Dio_PinMode(PA1, INPUT);
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	8b e0       	ldi	r24, 0x0B	; 11
    1956:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
	/* Step 1	->		Set Voltage Reference  */
	#if			VOLTAGE_REFERENCE		==		AREF
	ClrBit(ADMUX,REF0);
	ClrBit(ADMUX,REF1);
	#elif		VOLTAGE_REFERENCE		==		AVCC
	SetBit(ADMUX,REF0);
    195a:	87 b1       	in	r24, 0x07	; 7
    195c:	80 64       	ori	r24, 0x40	; 64
    195e:	87 b9       	out	0x07, r24	; 7
	ClrBit(ADMUX,REF1);
    1960:	87 b1       	in	r24, 0x07	; 7
    1962:	8f 77       	andi	r24, 0x7F	; 127
    1964:	87 b9       	out	0x07, r24	; 7
	SetBit(ADMUX,REF1);
	#endif
	
	/* Step 2	->		Set Left Adjust Result  */
	#if			LEFT_ADJUST_RESULT		==		RIGHT_ADJUST
	ClrBit(ADMUX,ADLAR);
    1966:	87 b1       	in	r24, 0x07	; 7
    1968:	8f 7d       	andi	r24, 0xDF	; 223
    196a:	87 b9       	out	0x07, r24	; 7
	#elif		LEFT_ADJUST_RESULT		==		LEFT_ADJUST
	SetBit(ADMUX,ADLAR);
	#endif				
	
	/* Step 3	->		Set Pin Used  */
	ClrBit(ADMUX,MUX4); ClrBit(ADMUX,MUX3); ClrBit(ADMUX,MUX2); ClrBit(ADMUX,MUX1); ClrBit(ADMUX,MUX0);
    196c:	87 b1       	in	r24, 0x07	; 7
    196e:	8f 7e       	andi	r24, 0xEF	; 239
    1970:	87 b9       	out	0x07, r24	; 7
    1972:	87 b1       	in	r24, 0x07	; 7
    1974:	87 7f       	andi	r24, 0xF7	; 247
    1976:	87 b9       	out	0x07, r24	; 7
    1978:	87 b1       	in	r24, 0x07	; 7
    197a:	8b 7f       	andi	r24, 0xFB	; 251
    197c:	87 b9       	out	0x07, r24	; 7
    197e:	87 b1       	in	r24, 0x07	; 7
    1980:	8d 7f       	andi	r24, 0xFD	; 253
    1982:	87 b9       	out	0x07, r24	; 7
    1984:	87 b1       	in	r24, 0x07	; 7
    1986:	8e 7f       	andi	r24, 0xFE	; 254
    1988:	87 b9       	out	0x07, r24	; 7
	
	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_64	
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	ClrBit(ADCSRA,ADPS0);

	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_128
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	SetBit(ADCSRA,ADPS0);
    198a:	86 b1       	in	r24, 0x06	; 6
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	86 b9       	out	0x06, r24	; 6
    1990:	86 b1       	in	r24, 0x06	; 6
    1992:	82 60       	ori	r24, 0x02	; 2
    1994:	86 b9       	out	0x06, r24	; 6
    1996:	86 b1       	in	r24, 0x06	; 6
    1998:	81 60       	ori	r24, 0x01	; 1
    199a:	86 b9       	out	0x06, r24	; 6
	#endif



	/* Step 5	->		set ADC Enable */
	SetBit(ADCSRA,ADEN);
    199c:	86 b1       	in	r24, 0x06	; 6
    199e:	80 68       	ori	r24, 0x80	; 128
    19a0:	86 b9       	out	0x06, r24	; 6
	
	SetBit(ADCSRA,ADATE);
    19a2:	86 b1       	in	r24, 0x06	; 6
    19a4:	80 62       	ori	r24, 0x20	; 32
    19a6:	86 b9       	out	0x06, r24	; 6
    19a8:	08 95       	ret

000019aa <M_Adc_Read>:
}

u16 M_Adc_Read(void)
{
	u16 Local_u16_Data = 0;
	SetBit(ADCSRA,ADSC);
    19aa:	86 b1       	in	r24, 0x06	; 6
    19ac:	80 64       	ori	r24, 0x40	; 64
    19ae:	86 b9       	out	0x06, r24	; 6
	while(GetBit(ADCSRA,ADIF) == 0);
    19b0:	34 9b       	sbis	0x06, 4	; 6
    19b2:	fe cf       	rjmp	.-4      	; 0x19b0 <M_Adc_Read+0x6>
	
	Local_u16_Data = (ADCL + (ADCH<<8));
    19b4:	24 b1       	in	r18, 0x04	; 4
    19b6:	85 b1       	in	r24, 0x05	; 5
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	98 2f       	mov	r25, r24
    19bc:	88 27       	eor	r24, r24
	
	//Local_u16_Data = ADCH;
	//ClrBit(ADCSRA,ADIF);
		
	return Local_u16_Data;
}
    19be:	82 0f       	add	r24, r18
    19c0:	91 1d       	adc	r25, r1
    19c2:	08 95       	ret

000019c4 <M_Dio_PinMode>:
    19c4:	9d ec       	ldi	r25, 0xCD	; 205
    19c6:	89 9f       	mul	r24, r25
    19c8:	91 2d       	mov	r25, r1
    19ca:	11 24       	eor	r1, r1
    19cc:	29 2f       	mov	r18, r25
    19ce:	26 95       	lsr	r18
    19d0:	26 95       	lsr	r18
    19d2:	26 95       	lsr	r18
    19d4:	22 0f       	add	r18, r18
    19d6:	32 2f       	mov	r19, r18
    19d8:	33 0f       	add	r19, r19
    19da:	33 0f       	add	r19, r19
    19dc:	23 0f       	add	r18, r19
    19de:	82 1b       	sub	r24, r18
    19e0:	28 2f       	mov	r18, r24
    19e2:	96 95       	lsr	r25
    19e4:	96 95       	lsr	r25
    19e6:	96 95       	lsr	r25
    19e8:	66 23       	and	r22, r22
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <M_Dio_PinMode+0x2e>
    19ec:	61 30       	cpi	r22, 0x01	; 1
    19ee:	e1 f1       	breq	.+120    	; 0x1a68 <M_Dio_PinMode+0xa4>
    19f0:	08 95       	ret
    19f2:	92 30       	cpi	r25, 0x02	; 2
    19f4:	a9 f0       	breq	.+42     	; 0x1a20 <M_Dio_PinMode+0x5c>
    19f6:	18 f4       	brcc	.+6      	; 0x19fe <M_Dio_PinMode+0x3a>
    19f8:	91 30       	cpi	r25, 0x01	; 1
    19fa:	31 f0       	breq	.+12     	; 0x1a08 <M_Dio_PinMode+0x44>
    19fc:	08 95       	ret
    19fe:	93 30       	cpi	r25, 0x03	; 3
    1a00:	d9 f0       	breq	.+54     	; 0x1a38 <M_Dio_PinMode+0x74>
    1a02:	94 30       	cpi	r25, 0x04	; 4
    1a04:	29 f1       	breq	.+74     	; 0x1a50 <M_Dio_PinMode+0x8c>
    1a06:	08 95       	ret
    1a08:	3a b3       	in	r19, 0x1a	; 26
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <M_Dio_PinMode+0x50>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	2a 95       	dec	r18
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <M_Dio_PinMode+0x4c>
    1a18:	80 95       	com	r24
    1a1a:	83 23       	and	r24, r19
    1a1c:	8a bb       	out	0x1a, r24	; 26
    1a1e:	08 95       	ret
    1a20:	37 b3       	in	r19, 0x17	; 23
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <M_Dio_PinMode+0x68>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	2a 95       	dec	r18
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <M_Dio_PinMode+0x64>
    1a30:	80 95       	com	r24
    1a32:	83 23       	and	r24, r19
    1a34:	87 bb       	out	0x17, r24	; 23
    1a36:	08 95       	ret
    1a38:	34 b3       	in	r19, 0x14	; 20
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <M_Dio_PinMode+0x80>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	2a 95       	dec	r18
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <M_Dio_PinMode+0x7c>
    1a48:	80 95       	com	r24
    1a4a:	83 23       	and	r24, r19
    1a4c:	84 bb       	out	0x14, r24	; 20
    1a4e:	08 95       	ret
    1a50:	31 b3       	in	r19, 0x11	; 17
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <M_Dio_PinMode+0x98>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	2a 95       	dec	r18
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <M_Dio_PinMode+0x94>
    1a60:	80 95       	com	r24
    1a62:	83 23       	and	r24, r19
    1a64:	81 bb       	out	0x11, r24	; 17
    1a66:	08 95       	ret
    1a68:	92 30       	cpi	r25, 0x02	; 2
    1a6a:	a1 f0       	breq	.+40     	; 0x1a94 <M_Dio_PinMode+0xd0>
    1a6c:	18 f4       	brcc	.+6      	; 0x1a74 <M_Dio_PinMode+0xb0>
    1a6e:	91 30       	cpi	r25, 0x01	; 1
    1a70:	31 f0       	breq	.+12     	; 0x1a7e <M_Dio_PinMode+0xba>
    1a72:	08 95       	ret
    1a74:	93 30       	cpi	r25, 0x03	; 3
    1a76:	c9 f0       	breq	.+50     	; 0x1aaa <M_Dio_PinMode+0xe6>
    1a78:	94 30       	cpi	r25, 0x04	; 4
    1a7a:	11 f1       	breq	.+68     	; 0x1ac0 <M_Dio_PinMode+0xfc>
    1a7c:	08 95       	ret
    1a7e:	3a b3       	in	r19, 0x1a	; 26
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <M_Dio_PinMode+0xc6>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	2a 95       	dec	r18
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <M_Dio_PinMode+0xc2>
    1a8e:	83 2b       	or	r24, r19
    1a90:	8a bb       	out	0x1a, r24	; 26
    1a92:	08 95       	ret
    1a94:	37 b3       	in	r19, 0x17	; 23
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <M_Dio_PinMode+0xdc>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	2a 95       	dec	r18
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <M_Dio_PinMode+0xd8>
    1aa4:	83 2b       	or	r24, r19
    1aa6:	87 bb       	out	0x17, r24	; 23
    1aa8:	08 95       	ret
    1aaa:	34 b3       	in	r19, 0x14	; 20
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <M_Dio_PinMode+0xf2>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	2a 95       	dec	r18
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <M_Dio_PinMode+0xee>
    1aba:	83 2b       	or	r24, r19
    1abc:	84 bb       	out	0x14, r24	; 20
    1abe:	08 95       	ret
    1ac0:	31 b3       	in	r19, 0x11	; 17
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <M_Dio_PinMode+0x108>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	2a 95       	dec	r18
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <M_Dio_PinMode+0x104>
    1ad0:	83 2b       	or	r24, r19
    1ad2:	81 bb       	out	0x11, r24	; 17
    1ad4:	08 95       	ret

00001ad6 <M_Dio_PinWrite>:
    1ad6:	9d ec       	ldi	r25, 0xCD	; 205
    1ad8:	89 9f       	mul	r24, r25
    1ada:	91 2d       	mov	r25, r1
    1adc:	11 24       	eor	r1, r1
    1ade:	29 2f       	mov	r18, r25
    1ae0:	26 95       	lsr	r18
    1ae2:	26 95       	lsr	r18
    1ae4:	26 95       	lsr	r18
    1ae6:	22 0f       	add	r18, r18
    1ae8:	32 2f       	mov	r19, r18
    1aea:	33 0f       	add	r19, r19
    1aec:	33 0f       	add	r19, r19
    1aee:	23 0f       	add	r18, r19
    1af0:	82 1b       	sub	r24, r18
    1af2:	28 2f       	mov	r18, r24
    1af4:	96 95       	lsr	r25
    1af6:	96 95       	lsr	r25
    1af8:	96 95       	lsr	r25
    1afa:	66 23       	and	r22, r22
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <M_Dio_PinWrite+0x2e>
    1afe:	61 30       	cpi	r22, 0x01	; 1
    1b00:	e1 f1       	breq	.+120    	; 0x1b7a <M_Dio_PinWrite+0xa4>
    1b02:	08 95       	ret
    1b04:	92 30       	cpi	r25, 0x02	; 2
    1b06:	a9 f0       	breq	.+42     	; 0x1b32 <M_Dio_PinWrite+0x5c>
    1b08:	18 f4       	brcc	.+6      	; 0x1b10 <M_Dio_PinWrite+0x3a>
    1b0a:	91 30       	cpi	r25, 0x01	; 1
    1b0c:	31 f0       	breq	.+12     	; 0x1b1a <M_Dio_PinWrite+0x44>
    1b0e:	08 95       	ret
    1b10:	93 30       	cpi	r25, 0x03	; 3
    1b12:	d9 f0       	breq	.+54     	; 0x1b4a <M_Dio_PinWrite+0x74>
    1b14:	94 30       	cpi	r25, 0x04	; 4
    1b16:	29 f1       	breq	.+74     	; 0x1b62 <M_Dio_PinWrite+0x8c>
    1b18:	08 95       	ret
    1b1a:	3b b3       	in	r19, 0x1b	; 27
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <M_Dio_PinWrite+0x50>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	2a 95       	dec	r18
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <M_Dio_PinWrite+0x4c>
    1b2a:	80 95       	com	r24
    1b2c:	83 23       	and	r24, r19
    1b2e:	8b bb       	out	0x1b, r24	; 27
    1b30:	08 95       	ret
    1b32:	38 b3       	in	r19, 0x18	; 24
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <M_Dio_PinWrite+0x68>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	2a 95       	dec	r18
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <M_Dio_PinWrite+0x64>
    1b42:	80 95       	com	r24
    1b44:	83 23       	and	r24, r19
    1b46:	88 bb       	out	0x18, r24	; 24
    1b48:	08 95       	ret
    1b4a:	35 b3       	in	r19, 0x15	; 21
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <M_Dio_PinWrite+0x80>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	2a 95       	dec	r18
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <M_Dio_PinWrite+0x7c>
    1b5a:	80 95       	com	r24
    1b5c:	83 23       	and	r24, r19
    1b5e:	85 bb       	out	0x15, r24	; 21
    1b60:	08 95       	ret
    1b62:	32 b3       	in	r19, 0x12	; 18
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <M_Dio_PinWrite+0x98>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	2a 95       	dec	r18
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <M_Dio_PinWrite+0x94>
    1b72:	80 95       	com	r24
    1b74:	83 23       	and	r24, r19
    1b76:	82 bb       	out	0x12, r24	; 18
    1b78:	08 95       	ret
    1b7a:	92 30       	cpi	r25, 0x02	; 2
    1b7c:	a1 f0       	breq	.+40     	; 0x1ba6 <M_Dio_PinWrite+0xd0>
    1b7e:	18 f4       	brcc	.+6      	; 0x1b86 <M_Dio_PinWrite+0xb0>
    1b80:	91 30       	cpi	r25, 0x01	; 1
    1b82:	31 f0       	breq	.+12     	; 0x1b90 <M_Dio_PinWrite+0xba>
    1b84:	08 95       	ret
    1b86:	93 30       	cpi	r25, 0x03	; 3
    1b88:	c9 f0       	breq	.+50     	; 0x1bbc <M_Dio_PinWrite+0xe6>
    1b8a:	94 30       	cpi	r25, 0x04	; 4
    1b8c:	11 f1       	breq	.+68     	; 0x1bd2 <M_Dio_PinWrite+0xfc>
    1b8e:	08 95       	ret
    1b90:	3b b3       	in	r19, 0x1b	; 27
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <M_Dio_PinWrite+0xc6>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	2a 95       	dec	r18
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <M_Dio_PinWrite+0xc2>
    1ba0:	83 2b       	or	r24, r19
    1ba2:	8b bb       	out	0x1b, r24	; 27
    1ba4:	08 95       	ret
    1ba6:	38 b3       	in	r19, 0x18	; 24
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <M_Dio_PinWrite+0xdc>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	2a 95       	dec	r18
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <M_Dio_PinWrite+0xd8>
    1bb6:	83 2b       	or	r24, r19
    1bb8:	88 bb       	out	0x18, r24	; 24
    1bba:	08 95       	ret
    1bbc:	35 b3       	in	r19, 0x15	; 21
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <M_Dio_PinWrite+0xf2>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	2a 95       	dec	r18
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <M_Dio_PinWrite+0xee>
    1bcc:	83 2b       	or	r24, r19
    1bce:	85 bb       	out	0x15, r24	; 21
    1bd0:	08 95       	ret
    1bd2:	32 b3       	in	r19, 0x12	; 18
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <M_Dio_PinWrite+0x108>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	2a 95       	dec	r18
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <M_Dio_PinWrite+0x104>
    1be2:	83 2b       	or	r24, r19
    1be4:	82 bb       	out	0x12, r24	; 18
    1be6:	08 95       	ret

00001be8 <M_Dio_PinRead>:
    1be8:	9d ec       	ldi	r25, 0xCD	; 205
    1bea:	89 9f       	mul	r24, r25
    1bec:	91 2d       	mov	r25, r1
    1bee:	11 24       	eor	r1, r1
    1bf0:	29 2f       	mov	r18, r25
    1bf2:	26 95       	lsr	r18
    1bf4:	26 95       	lsr	r18
    1bf6:	26 95       	lsr	r18
    1bf8:	22 0f       	add	r18, r18
    1bfa:	32 2f       	mov	r19, r18
    1bfc:	33 0f       	add	r19, r19
    1bfe:	33 0f       	add	r19, r19
    1c00:	23 0f       	add	r18, r19
    1c02:	82 1b       	sub	r24, r18
    1c04:	28 2f       	mov	r18, r24
    1c06:	89 2f       	mov	r24, r25
    1c08:	86 95       	lsr	r24
    1c0a:	86 95       	lsr	r24
    1c0c:	86 95       	lsr	r24
    1c0e:	82 30       	cpi	r24, 0x02	; 2
    1c10:	91 f0       	breq	.+36     	; 0x1c36 <M_Dio_PinRead+0x4e>
    1c12:	18 f4       	brcc	.+6      	; 0x1c1a <M_Dio_PinRead+0x32>
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	31 f0       	breq	.+12     	; 0x1c24 <M_Dio_PinRead+0x3c>
    1c18:	29 c0       	rjmp	.+82     	; 0x1c6c <M_Dio_PinRead+0x84>
    1c1a:	83 30       	cpi	r24, 0x03	; 3
    1c1c:	a9 f0       	breq	.+42     	; 0x1c48 <M_Dio_PinRead+0x60>
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	e1 f0       	breq	.+56     	; 0x1c5a <M_Dio_PinRead+0x72>
    1c22:	24 c0       	rjmp	.+72     	; 0x1c6c <M_Dio_PinRead+0x84>
    1c24:	89 b3       	in	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <M_Dio_PinRead+0x46>
    1c2a:	95 95       	asr	r25
    1c2c:	87 95       	ror	r24
    1c2e:	2a 95       	dec	r18
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <M_Dio_PinRead+0x42>
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	08 95       	ret
    1c36:	86 b3       	in	r24, 0x16	; 22
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <M_Dio_PinRead+0x58>
    1c3c:	95 95       	asr	r25
    1c3e:	87 95       	ror	r24
    1c40:	2a 95       	dec	r18
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <M_Dio_PinRead+0x54>
    1c44:	81 70       	andi	r24, 0x01	; 1
    1c46:	08 95       	ret
    1c48:	83 b3       	in	r24, 0x13	; 19
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <M_Dio_PinRead+0x6a>
    1c4e:	95 95       	asr	r25
    1c50:	87 95       	ror	r24
    1c52:	2a 95       	dec	r18
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <M_Dio_PinRead+0x66>
    1c56:	81 70       	andi	r24, 0x01	; 1
    1c58:	08 95       	ret
    1c5a:	80 b3       	in	r24, 0x10	; 16
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <M_Dio_PinRead+0x7c>
    1c60:	95 95       	asr	r25
    1c62:	87 95       	ror	r24
    1c64:	2a 95       	dec	r18
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <M_Dio_PinRead+0x78>
    1c68:	81 70       	andi	r24, 0x01	; 1
    1c6a:	08 95       	ret
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	08 95       	ret

00001c70 <M_Dio_PinPullUp>:
    1c70:	9d ec       	ldi	r25, 0xCD	; 205
    1c72:	89 9f       	mul	r24, r25
    1c74:	91 2d       	mov	r25, r1
    1c76:	11 24       	eor	r1, r1
    1c78:	29 2f       	mov	r18, r25
    1c7a:	26 95       	lsr	r18
    1c7c:	26 95       	lsr	r18
    1c7e:	26 95       	lsr	r18
    1c80:	22 0f       	add	r18, r18
    1c82:	32 2f       	mov	r19, r18
    1c84:	33 0f       	add	r19, r19
    1c86:	33 0f       	add	r19, r19
    1c88:	23 0f       	add	r18, r19
    1c8a:	82 1b       	sub	r24, r18
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	96 95       	lsr	r25
    1c90:	96 95       	lsr	r25
    1c92:	96 95       	lsr	r25
    1c94:	66 23       	and	r22, r22
    1c96:	19 f0       	breq	.+6      	; 0x1c9e <M_Dio_PinPullUp+0x2e>
    1c98:	61 30       	cpi	r22, 0x01	; 1
    1c9a:	e1 f1       	breq	.+120    	; 0x1d14 <M_Dio_PinPullUp+0xa4>
    1c9c:	08 95       	ret
    1c9e:	92 30       	cpi	r25, 0x02	; 2
    1ca0:	a9 f0       	breq	.+42     	; 0x1ccc <M_Dio_PinPullUp+0x5c>
    1ca2:	18 f4       	brcc	.+6      	; 0x1caa <M_Dio_PinPullUp+0x3a>
    1ca4:	91 30       	cpi	r25, 0x01	; 1
    1ca6:	31 f0       	breq	.+12     	; 0x1cb4 <M_Dio_PinPullUp+0x44>
    1ca8:	08 95       	ret
    1caa:	93 30       	cpi	r25, 0x03	; 3
    1cac:	d9 f0       	breq	.+54     	; 0x1ce4 <M_Dio_PinPullUp+0x74>
    1cae:	94 30       	cpi	r25, 0x04	; 4
    1cb0:	29 f1       	breq	.+74     	; 0x1cfc <M_Dio_PinPullUp+0x8c>
    1cb2:	08 95       	ret
    1cb4:	3b b3       	in	r19, 0x1b	; 27
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <M_Dio_PinPullUp+0x50>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	2a 95       	dec	r18
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <M_Dio_PinPullUp+0x4c>
    1cc4:	80 95       	com	r24
    1cc6:	83 23       	and	r24, r19
    1cc8:	8b bb       	out	0x1b, r24	; 27
    1cca:	08 95       	ret
    1ccc:	38 b3       	in	r19, 0x18	; 24
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <M_Dio_PinPullUp+0x68>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	2a 95       	dec	r18
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <M_Dio_PinPullUp+0x64>
    1cdc:	80 95       	com	r24
    1cde:	83 23       	and	r24, r19
    1ce0:	88 bb       	out	0x18, r24	; 24
    1ce2:	08 95       	ret
    1ce4:	35 b3       	in	r19, 0x15	; 21
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <M_Dio_PinPullUp+0x80>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	2a 95       	dec	r18
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <M_Dio_PinPullUp+0x7c>
    1cf4:	80 95       	com	r24
    1cf6:	83 23       	and	r24, r19
    1cf8:	85 bb       	out	0x15, r24	; 21
    1cfa:	08 95       	ret
    1cfc:	32 b3       	in	r19, 0x12	; 18
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <M_Dio_PinPullUp+0x98>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	2a 95       	dec	r18
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <M_Dio_PinPullUp+0x94>
    1d0c:	80 95       	com	r24
    1d0e:	83 23       	and	r24, r19
    1d10:	82 bb       	out	0x12, r24	; 18
    1d12:	08 95       	ret
    1d14:	92 30       	cpi	r25, 0x02	; 2
    1d16:	a1 f0       	breq	.+40     	; 0x1d40 <M_Dio_PinPullUp+0xd0>
    1d18:	18 f4       	brcc	.+6      	; 0x1d20 <M_Dio_PinPullUp+0xb0>
    1d1a:	91 30       	cpi	r25, 0x01	; 1
    1d1c:	31 f0       	breq	.+12     	; 0x1d2a <M_Dio_PinPullUp+0xba>
    1d1e:	08 95       	ret
    1d20:	93 30       	cpi	r25, 0x03	; 3
    1d22:	c9 f0       	breq	.+50     	; 0x1d56 <M_Dio_PinPullUp+0xe6>
    1d24:	94 30       	cpi	r25, 0x04	; 4
    1d26:	11 f1       	breq	.+68     	; 0x1d6c <M_Dio_PinPullUp+0xfc>
    1d28:	08 95       	ret
    1d2a:	3b b3       	in	r19, 0x1b	; 27
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <M_Dio_PinPullUp+0xc6>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	2a 95       	dec	r18
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <M_Dio_PinPullUp+0xc2>
    1d3a:	83 2b       	or	r24, r19
    1d3c:	8b bb       	out	0x1b, r24	; 27
    1d3e:	08 95       	ret
    1d40:	38 b3       	in	r19, 0x18	; 24
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <M_Dio_PinPullUp+0xdc>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	2a 95       	dec	r18
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <M_Dio_PinPullUp+0xd8>
    1d50:	83 2b       	or	r24, r19
    1d52:	88 bb       	out	0x18, r24	; 24
    1d54:	08 95       	ret
    1d56:	35 b3       	in	r19, 0x15	; 21
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <M_Dio_PinPullUp+0xf2>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	2a 95       	dec	r18
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <M_Dio_PinPullUp+0xee>
    1d66:	83 2b       	or	r24, r19
    1d68:	85 bb       	out	0x15, r24	; 21
    1d6a:	08 95       	ret
    1d6c:	32 b3       	in	r19, 0x12	; 18
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <M_Dio_PinPullUp+0x108>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	2a 95       	dec	r18
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <M_Dio_PinPullUp+0x104>
    1d7c:	83 2b       	or	r24, r19
    1d7e:	82 bb       	out	0x12, r24	; 18
    1d80:	08 95       	ret

00001d82 <M_I2c_Init>:
//     SetBit(TWCR,6);					 //   later
// 	SetBit(TWCR,7);                  //   to clear the flag bit
// 	while(GetBit(TWCR,7) == 0);
// 	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
// 	return TWDR;
}
    1d82:	86 b7       	in	r24, 0x36	; 54
    1d84:	8b 7f       	andi	r24, 0xFB	; 251
    1d86:	86 bf       	out	0x36, r24	; 54
    1d88:	8c e0       	ldi	r24, 0x0C	; 12
    1d8a:	80 b9       	out	0x00, r24	; 0
    1d8c:	86 b7       	in	r24, 0x36	; 54
    1d8e:	84 60       	ori	r24, 0x04	; 4
    1d90:	86 bf       	out	0x36, r24	; 54
    1d92:	8f e3       	ldi	r24, 0x3F	; 63
    1d94:	9c e9       	ldi	r25, 0x9C	; 156
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <M_I2c_Init+0x14>
    1d9a:	00 c0       	rjmp	.+0      	; 0x1d9c <M_I2c_Init+0x1a>
    1d9c:	00 00       	nop
    1d9e:	08 95       	ret

00001da0 <M_I2c_StartCondition>:
    1da0:	86 b7       	in	r24, 0x36	; 54
    1da2:	80 62       	ori	r24, 0x20	; 32
    1da4:	86 bf       	out	0x36, r24	; 54
    1da6:	86 b7       	in	r24, 0x36	; 54
    1da8:	80 68       	ori	r24, 0x80	; 128
    1daa:	86 bf       	out	0x36, r24	; 54
    1dac:	06 b6       	in	r0, 0x36	; 54
    1dae:	07 fe       	sbrs	r0, 7
    1db0:	fd cf       	rjmp	.-6      	; 0x1dac <M_I2c_StartCondition+0xc>
    1db2:	81 b1       	in	r24, 0x01	; 1
    1db4:	88 7f       	andi	r24, 0xF8	; 248
    1db6:	88 30       	cpi	r24, 0x08	; 8
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <M_I2c_StartCondition+0x12>
    1dba:	8f e3       	ldi	r24, 0x3F	; 63
    1dbc:	9c e9       	ldi	r25, 0x9C	; 156
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <M_I2c_StartCondition+0x1e>
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <M_I2c_StartCondition+0x24>
    1dc4:	00 00       	nop
    1dc6:	08 95       	ret

00001dc8 <M_I2c_SendSlaveAddressWrite>:
    1dc8:	88 0f       	add	r24, r24
    1dca:	83 b9       	out	0x03, r24	; 3
    1dcc:	86 b7       	in	r24, 0x36	; 54
    1dce:	80 68       	ori	r24, 0x80	; 128
    1dd0:	86 bf       	out	0x36, r24	; 54
    1dd2:	06 b6       	in	r0, 0x36	; 54
    1dd4:	07 fe       	sbrs	r0, 7
    1dd6:	fd cf       	rjmp	.-6      	; 0x1dd2 <M_I2c_SendSlaveAddressWrite+0xa>
    1dd8:	81 b1       	in	r24, 0x01	; 1
    1dda:	88 7f       	andi	r24, 0xF8	; 248
    1ddc:	88 31       	cpi	r24, 0x18	; 24
    1dde:	e1 f7       	brne	.-8      	; 0x1dd8 <M_I2c_SendSlaveAddressWrite+0x10>
    1de0:	8f e3       	ldi	r24, 0x3F	; 63
    1de2:	9c e9       	ldi	r25, 0x9C	; 156
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <M_I2c_SendSlaveAddressWrite+0x1c>
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <M_I2c_SendSlaveAddressWrite+0x22>
    1dea:	00 00       	nop
    1dec:	08 95       	ret

00001dee <M_I2c_SendSlaveAddressRead>:
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	81 60       	ori	r24, 0x01	; 1
    1df6:	83 b9       	out	0x03, r24	; 3
    1df8:	86 b7       	in	r24, 0x36	; 54
    1dfa:	80 68       	ori	r24, 0x80	; 128
    1dfc:	86 bf       	out	0x36, r24	; 54
    1dfe:	06 b6       	in	r0, 0x36	; 54
    1e00:	07 fe       	sbrs	r0, 7
    1e02:	fd cf       	rjmp	.-6      	; 0x1dfe <M_I2c_SendSlaveAddressRead+0x10>
    1e04:	81 b1       	in	r24, 0x01	; 1
    1e06:	88 7f       	andi	r24, 0xF8	; 248
    1e08:	80 34       	cpi	r24, 0x40	; 64
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <M_I2c_SendSlaveAddressRead+0x16>
    1e0c:	8f e3       	ldi	r24, 0x3F	; 63
    1e0e:	9c e9       	ldi	r25, 0x9C	; 156
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <M_I2c_SendSlaveAddressRead+0x22>
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <M_I2c_SendSlaveAddressRead+0x28>
    1e16:	00 00       	nop
    1e18:	08 95       	ret

00001e1a <M_I2c_SendSByte>:
    1e1a:	83 b9       	out	0x03, r24	; 3
    1e1c:	86 b7       	in	r24, 0x36	; 54
    1e1e:	8f 7d       	andi	r24, 0xDF	; 223
    1e20:	86 bf       	out	0x36, r24	; 54
    1e22:	86 b7       	in	r24, 0x36	; 54
    1e24:	80 68       	ori	r24, 0x80	; 128
    1e26:	86 bf       	out	0x36, r24	; 54
    1e28:	06 b6       	in	r0, 0x36	; 54
    1e2a:	07 fe       	sbrs	r0, 7
    1e2c:	fd cf       	rjmp	.-6      	; 0x1e28 <M_I2c_SendSByte+0xe>
    1e2e:	81 b1       	in	r24, 0x01	; 1
    1e30:	88 7f       	andi	r24, 0xF8	; 248
    1e32:	88 32       	cpi	r24, 0x28	; 40
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <M_I2c_SendSByte+0x14>
    1e36:	2f ef       	ldi	r18, 0xFF	; 255
    1e38:	81 ee       	ldi	r24, 0xE1	; 225
    1e3a:	94 e0       	ldi	r25, 0x04	; 4
    1e3c:	21 50       	subi	r18, 0x01	; 1
    1e3e:	80 40       	sbci	r24, 0x00	; 0
    1e40:	90 40       	sbci	r25, 0x00	; 0
    1e42:	e1 f7       	brne	.-8      	; 0x1e3c <M_I2c_SendSByte+0x22>
    1e44:	00 c0       	rjmp	.+0      	; 0x1e46 <M_I2c_SendSByte+0x2c>
    1e46:	00 00       	nop
    1e48:	08 95       	ret

00001e4a <M_I2c_ReadByteNoAck>:
u8 M_I2c_ReadByteNoAck()
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    1e4a:	84 e8       	ldi	r24, 0x84	; 132
    1e4c:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,TWINT) == 0);
    1e4e:	06 b6       	in	r0, 0x36	; 54
    1e50:	07 fe       	sbrs	r0, 7
    1e52:	fd cf       	rjmp	.-6      	; 0x1e4e <M_I2c_ReadByteNoAck+0x4>
	return TWDR;
    1e54:	83 b1       	in	r24, 0x03	; 3
}
    1e56:	08 95       	ret

00001e58 <M_I2c_RepeatedStart>:
void M_I2c_RepeatedStart(void)
{
	SetBit(TWCR,5);
    1e58:	86 b7       	in	r24, 0x36	; 54
    1e5a:	80 62       	ori	r24, 0x20	; 32
    1e5c:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);                  //   to clear the flag bit
    1e5e:	86 b7       	in	r24, 0x36	; 54
    1e60:	80 68       	ori	r24, 0x80	; 128
    1e62:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,7) == 0);
    1e64:	06 b6       	in	r0, 0x36	; 54
    1e66:	07 fe       	sbrs	r0, 7
    1e68:	fd cf       	rjmp	.-6      	; 0x1e64 <M_I2c_RepeatedStart+0xc>
	while((TWSR & 0xF8) != REP_START_ACK);
    1e6a:	81 b1       	in	r24, 0x01	; 1
    1e6c:	88 7f       	andi	r24, 0xF8	; 248
    1e6e:	80 31       	cpi	r24, 0x10	; 16
    1e70:	e1 f7       	brne	.-8      	; 0x1e6a <M_I2c_RepeatedStart+0x12>
}
    1e72:	08 95       	ret

00001e74 <M_I2c_StopCondition>:
//  	SetBit(TWCR,7);                  //   to clear the flag bit
//  	SetBit(TWCR,4);
// // 	SetBit(TWCR,2);	
	//while(GetBit(TWCR,7) == 0);
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	SetBit(TWCR,4);
    1e74:	86 b7       	in	r24, 0x36	; 54
    1e76:	80 61       	ori	r24, 0x10	; 16
    1e78:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);
    1e7a:	86 b7       	in	r24, 0x36	; 54
    1e7c:	80 68       	ori	r24, 0x80	; 128
    1e7e:	86 bf       	out	0x36, r24	; 54
    1e80:	8f e9       	ldi	r24, 0x9F	; 159
    1e82:	9f e0       	ldi	r25, 0x0F	; 15
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <M_I2c_StopCondition+0x10>
    1e88:	00 c0       	rjmp	.+0      	; 0x1e8a <M_I2c_StopCondition+0x16>
    1e8a:	00 00       	nop
    1e8c:	08 95       	ret

00001e8e <M_Pwm1_Init>:
#include "Timer1.h"

void M_Pwm1_Init				(void)
{
	
 	SetBit(DDRD,5);	
    1e8e:	81 b3       	in	r24, 0x11	; 17
    1e90:	80 62       	ori	r24, 0x20	; 32
    1e92:	81 bb       	out	0x11, r24	; 17
 	
 	SetBit(TCCR1A,COM1A1);
    1e94:	8f b5       	in	r24, 0x2f	; 47
    1e96:	80 68       	ori	r24, 0x80	; 128
    1e98:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,COM1A0);
    1e9a:	8f b5       	in	r24, 0x2f	; 47
    1e9c:	8f 7b       	andi	r24, 0xBF	; 191
    1e9e:	8f bd       	out	0x2f, r24	; 47
	
	SetBit(TCCR1B,WGM13);
    1ea0:	8e b5       	in	r24, 0x2e	; 46
    1ea2:	80 61       	ori	r24, 0x10	; 16
    1ea4:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,WGM12);
    1ea6:	8e b5       	in	r24, 0x2e	; 46
    1ea8:	88 60       	ori	r24, 0x08	; 8
    1eaa:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1A,WGM11);
    1eac:	8f b5       	in	r24, 0x2f	; 47
    1eae:	82 60       	ori	r24, 0x02	; 2
    1eb0:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,WGM10);
    1eb2:	8f b5       	in	r24, 0x2f	; 47
    1eb4:	8e 7f       	andi	r24, 0xFE	; 254
    1eb6:	8f bd       	out	0x2f, r24	; 47
    1eb8:	08 95       	ret

00001eba <M_Pwm1_SetDutyCycle>:
	

	
}
void M_Pwm1_SetDutyCycle		(f32 Local_f32_DesiredDutyCycle)
{
    1eba:	cf 92       	push	r12
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	6b 01       	movw	r12, r22
    1ec4:	7c 01       	movw	r14, r24
	OCR1A = (((Local_f32_DesiredDutyCycle * ICR1)/100)-1);
    1ec6:	66 b5       	in	r22, 0x26	; 38
    1ec8:	77 b5       	in	r23, 0x27	; 39
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatunsisf>
    1ed2:	a7 01       	movw	r20, r14
    1ed4:	96 01       	movw	r18, r12
    1ed6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__mulsf3>
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	48 ec       	ldi	r20, 0xC8	; 200
    1ee0:	52 e4       	ldi	r21, 0x42	; 66
    1ee2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__divsf3>
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 10 10 	call	0x2020	; 0x2020 <__subsf3>
    1ef2:	0e 94 ef 10 	call	0x21de	; 0x21de <__fixunssfsi>
    1ef6:	7b bd       	out	0x2b, r23	; 43
    1ef8:	6a bd       	out	0x2a, r22	; 42
}
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	08 95       	ret

00001f04 <M_Pwm1_SetFrequency>:
void M_Pwm1_SetFrequency		(u16 Local_u16_DesiredFrequency)
{
	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Local_u16_DesiredFrequency * TIMER1_PRESCALER));
    1f04:	00 24       	eor	r0, r0
    1f06:	96 95       	lsr	r25
    1f08:	87 95       	ror	r24
    1f0a:	07 94       	ror	r0
    1f0c:	96 95       	lsr	r25
    1f0e:	87 95       	ror	r24
    1f10:	07 94       	ror	r0
    1f12:	98 2f       	mov	r25, r24
    1f14:	80 2d       	mov	r24, r0
    1f16:	9c 01       	movw	r18, r24
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	74 e2       	ldi	r23, 0x24	; 36
    1f20:	84 ef       	ldi	r24, 0xF4	; 244
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 4f 12 	call	0x249e	; 0x249e <__divmodsi4>
    1f28:	37 bd       	out	0x27, r19	; 39
    1f2a:	26 bd       	out	0x26, r18	; 38
    1f2c:	08 95       	ret

00001f2e <M_Pwm1_Start>:
}
void M_Pwm1_Start				(void)
{
	#if		TIMER1_PRESCALER == PRESCLNG_64
	ClrBit(TCCR1B,CS12);
    1f2e:	8e b5       	in	r24, 0x2e	; 46
    1f30:	8b 7f       	andi	r24, 0xFB	; 251
    1f32:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS11);
    1f34:	8e b5       	in	r24, 0x2e	; 46
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS10);
    1f3a:	8e b5       	in	r24, 0x2e	; 46
    1f3c:	81 60       	ori	r24, 0x01	; 1
    1f3e:	8e bd       	out	0x2e, r24	; 46
    1f40:	08 95       	ret

00001f42 <M_Timer2_Start>:
	#elif		TIMER2_PRESCALER	==		PRESCLNG_64		   
	ClrBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_256	   
	SetBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_1024	   
	SetBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
    1f42:	85 b5       	in	r24, 0x25	; 37
    1f44:	84 60       	ori	r24, 0x04	; 4
    1f46:	85 bd       	out	0x25, r24	; 37
    1f48:	85 b5       	in	r24, 0x25	; 37
    1f4a:	82 60       	ori	r24, 0x02	; 2
    1f4c:	85 bd       	out	0x25, r24	; 37
    1f4e:	85 b5       	in	r24, 0x25	; 37
    1f50:	81 60       	ori	r24, 0x01	; 1
    1f52:	85 bd       	out	0x25, r24	; 37
    1f54:	08 95       	ret

00001f56 <M_Timer2_Stop>:
	#endif
}

void M_Timer2_Stop			(void)
{
	ClrBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	ClrBit(TCCR2,CS20);
    1f56:	85 b5       	in	r24, 0x25	; 37
    1f58:	8b 7f       	andi	r24, 0xFB	; 251
    1f5a:	85 bd       	out	0x25, r24	; 37
    1f5c:	85 b5       	in	r24, 0x25	; 37
    1f5e:	8d 7f       	andi	r24, 0xFD	; 253
    1f60:	85 bd       	out	0x25, r24	; 37
    1f62:	85 b5       	in	r24, 0x25	; 37
    1f64:	8e 7f       	andi	r24, 0xFE	; 254
    1f66:	85 bd       	out	0x25, r24	; 37
    1f68:	08 95       	ret

00001f6a <M_Pwm2_Init>:
}


void M_Pwm2_Init				(void)
{
	M_Dio_PinMode(PD7,OUTPUT);
    1f6a:	61 e0       	ldi	r22, 0x01	; 1
    1f6c:	8f e2       	ldi	r24, 0x2F	; 47
    1f6e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>

	#if			PWM2_MODE		==		FAST_PWM
	SetBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
    1f72:	85 b5       	in	r24, 0x25	; 37
    1f74:	88 60       	ori	r24, 0x08	; 8
    1f76:	85 bd       	out	0x25, r24	; 37
    1f78:	85 b5       	in	r24, 0x25	; 37
    1f7a:	80 64       	ori	r24, 0x40	; 64
    1f7c:	85 bd       	out	0x25, r24	; 37
	#elif		PWM2_MODE		==		PHASE_CORRECT
	ClrBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
	#endif
	
	#if			OUTPUT_MODE		==		NON_INVERTED
	SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
    1f7e:	85 b5       	in	r24, 0x25	; 37
    1f80:	80 62       	ori	r24, 0x20	; 32
    1f82:	85 bd       	out	0x25, r24	; 37
    1f84:	85 b5       	in	r24, 0x25	; 37
    1f86:	8f 7e       	andi	r24, 0xEF	; 239
    1f88:	85 bd       	out	0x25, r24	; 37
    1f8a:	08 95       	ret

00001f8c <M_Pwm2_SetDutyCycle>:

void M_Pwm2_SetDutyCycle		(u8 Local_u8_DesiredDutyCycle)
{
	#if			OUTPUT_MODE		==		NON_INVERTED
	
	if(Local_u8_DesiredDutyCycle == 0)
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <M_Pwm2_SetDutyCycle+0x22>
	{
		SetBit(TCCR2,COM21); SetBit(TCCR2,COM20);
    1f90:	95 b5       	in	r25, 0x25	; 37
    1f92:	90 62       	ori	r25, 0x20	; 32
    1f94:	95 bd       	out	0x25, r25	; 37
    1f96:	95 b5       	in	r25, 0x25	; 37
    1f98:	90 61       	ori	r25, 0x10	; 16
    1f9a:	95 bd       	out	0x25, r25	; 37
		OCR2 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	64 e6       	ldi	r22, 0x64	; 100
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	0e 94 19 12 	call	0x2432	; 0x2432 <__divmodhi4>
    1fa8:	60 95       	com	r22
    1faa:	63 bd       	out	0x23, r22	; 35
    1fac:	08 95       	ret
	}
	else
	{
		SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
    1fae:	95 b5       	in	r25, 0x25	; 37
    1fb0:	90 62       	ori	r25, 0x20	; 32
    1fb2:	95 bd       	out	0x25, r25	; 37
    1fb4:	95 b5       	in	r25, 0x25	; 37
    1fb6:	9f 7e       	andi	r25, 0xEF	; 239
    1fb8:	95 bd       	out	0x25, r25	; 37
		OCR2 = (((Local_u8_DesiredDutyCycle * 256) / 100) - 1);
    1fba:	98 2f       	mov	r25, r24
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	64 e6       	ldi	r22, 0x64	; 100
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	0e 94 19 12 	call	0x2432	; 0x2432 <__divmodhi4>
    1fc6:	61 50       	subi	r22, 0x01	; 1
    1fc8:	63 bd       	out	0x23, r22	; 35
    1fca:	08 95       	ret

00001fcc <M_Pwm2_Start>:
	
}

void M_Pwm2_Start				(void)
{
	M_Timer2_Start();
    1fcc:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <M_Timer2_Start>
	M_Dio_PinMode(PD7,OUTPUT);
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	8f e2       	ldi	r24, 0x2F	; 47
    1fd4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
    1fd8:	08 95       	ret

00001fda <M_Pwm2_Stop>:
}

void M_Pwm2_Stop				(void)
{
	M_Timer2_Stop();
    1fda:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <M_Timer2_Stop>
	M_Dio_PinMode(PD7,INPUT);
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	8f e2       	ldi	r24, 0x2F	; 47
    1fe2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <M_Dio_PinMode>
    1fe6:	08 95       	ret

00001fe8 <M_Uart_Init>:
    1fe8:	81 b3       	in	r24, 0x11	; 17
    1fea:	8e 7f       	andi	r24, 0xFE	; 254
    1fec:	81 bb       	out	0x11, r24	; 17
    1fee:	81 b3       	in	r24, 0x11	; 17
    1ff0:	82 60       	ori	r24, 0x02	; 2
    1ff2:	81 bb       	out	0x11, r24	; 17
    1ff4:	8a b1       	in	r24, 0x0a	; 10
    1ff6:	8b 7f       	andi	r24, 0xFB	; 251
    1ff8:	8a b9       	out	0x0a, r24	; 10
    1ffa:	87 e6       	ldi	r24, 0x67	; 103
    1ffc:	89 b9       	out	0x09, r24	; 9
    1ffe:	86 ea       	ldi	r24, 0xA6	; 166
    2000:	80 bd       	out	0x20, r24	; 32
    2002:	8a b1       	in	r24, 0x0a	; 10
    2004:	88 60       	ori	r24, 0x08	; 8
    2006:	8a b9       	out	0x0a, r24	; 10
    2008:	8a b1       	in	r24, 0x0a	; 10
    200a:	80 61       	ori	r24, 0x10	; 16
    200c:	8a b9       	out	0x0a, r24	; 10
    200e:	08 95       	ret

00002010 <M_Uart_Write>:
    2010:	8c b9       	out	0x0c, r24	; 12
    2012:	5e 9b       	sbis	0x0b, 6	; 11
    2014:	fe cf       	rjmp	.-4      	; 0x2012 <M_Uart_Write+0x2>
    2016:	08 95       	ret

00002018 <M_Uart_Read>:
    2018:	5f 9b       	sbis	0x0b, 7	; 11
    201a:	fe cf       	rjmp	.-4      	; 0x2018 <M_Uart_Read>
    201c:	8c b1       	in	r24, 0x0c	; 12
    201e:	08 95       	ret

00002020 <__subsf3>:
    2020:	50 58       	subi	r21, 0x80	; 128

00002022 <__addsf3>:
    2022:	bb 27       	eor	r27, r27
    2024:	aa 27       	eor	r26, r26
    2026:	0e 94 28 10 	call	0x2050	; 0x2050 <__addsf3x>
    202a:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__fp_round>
    202e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__fp_pscA>
    2032:	38 f0       	brcs	.+14     	; 0x2042 <__addsf3+0x20>
    2034:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fp_pscB>
    2038:	20 f0       	brcs	.+8      	; 0x2042 <__addsf3+0x20>
    203a:	39 f4       	brne	.+14     	; 0x204a <__addsf3+0x28>
    203c:	9f 3f       	cpi	r25, 0xFF	; 255
    203e:	19 f4       	brne	.+6      	; 0x2046 <__addsf3+0x24>
    2040:	26 f4       	brtc	.+8      	; 0x204a <__addsf3+0x28>
    2042:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__fp_nan>
    2046:	0e f4       	brtc	.+2      	; 0x204a <__addsf3+0x28>
    2048:	e0 95       	com	r30
    204a:	e7 fb       	bst	r30, 7
    204c:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_inf>

00002050 <__addsf3x>:
    2050:	e9 2f       	mov	r30, r25
    2052:	0e 94 83 11 	call	0x2306	; 0x2306 <__fp_split3>
    2056:	58 f3       	brcs	.-42     	; 0x202e <__addsf3+0xc>
    2058:	ba 17       	cp	r27, r26
    205a:	62 07       	cpc	r22, r18
    205c:	73 07       	cpc	r23, r19
    205e:	84 07       	cpc	r24, r20
    2060:	95 07       	cpc	r25, r21
    2062:	20 f0       	brcs	.+8      	; 0x206c <__addsf3x+0x1c>
    2064:	79 f4       	brne	.+30     	; 0x2084 <__addsf3x+0x34>
    2066:	a6 f5       	brtc	.+104    	; 0x20d0 <__addsf3x+0x80>
    2068:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__fp_zero>
    206c:	0e f4       	brtc	.+2      	; 0x2070 <__addsf3x+0x20>
    206e:	e0 95       	com	r30
    2070:	0b 2e       	mov	r0, r27
    2072:	ba 2f       	mov	r27, r26
    2074:	a0 2d       	mov	r26, r0
    2076:	0b 01       	movw	r0, r22
    2078:	b9 01       	movw	r22, r18
    207a:	90 01       	movw	r18, r0
    207c:	0c 01       	movw	r0, r24
    207e:	ca 01       	movw	r24, r20
    2080:	a0 01       	movw	r20, r0
    2082:	11 24       	eor	r1, r1
    2084:	ff 27       	eor	r31, r31
    2086:	59 1b       	sub	r21, r25
    2088:	99 f0       	breq	.+38     	; 0x20b0 <__addsf3x+0x60>
    208a:	59 3f       	cpi	r21, 0xF9	; 249
    208c:	50 f4       	brcc	.+20     	; 0x20a2 <__addsf3x+0x52>
    208e:	50 3e       	cpi	r21, 0xE0	; 224
    2090:	68 f1       	brcs	.+90     	; 0x20ec <__addsf3x+0x9c>
    2092:	1a 16       	cp	r1, r26
    2094:	f0 40       	sbci	r31, 0x00	; 0
    2096:	a2 2f       	mov	r26, r18
    2098:	23 2f       	mov	r18, r19
    209a:	34 2f       	mov	r19, r20
    209c:	44 27       	eor	r20, r20
    209e:	58 5f       	subi	r21, 0xF8	; 248
    20a0:	f3 cf       	rjmp	.-26     	; 0x2088 <__addsf3x+0x38>
    20a2:	46 95       	lsr	r20
    20a4:	37 95       	ror	r19
    20a6:	27 95       	ror	r18
    20a8:	a7 95       	ror	r26
    20aa:	f0 40       	sbci	r31, 0x00	; 0
    20ac:	53 95       	inc	r21
    20ae:	c9 f7       	brne	.-14     	; 0x20a2 <__addsf3x+0x52>
    20b0:	7e f4       	brtc	.+30     	; 0x20d0 <__addsf3x+0x80>
    20b2:	1f 16       	cp	r1, r31
    20b4:	ba 0b       	sbc	r27, r26
    20b6:	62 0b       	sbc	r22, r18
    20b8:	73 0b       	sbc	r23, r19
    20ba:	84 0b       	sbc	r24, r20
    20bc:	ba f0       	brmi	.+46     	; 0x20ec <__addsf3x+0x9c>
    20be:	91 50       	subi	r25, 0x01	; 1
    20c0:	a1 f0       	breq	.+40     	; 0x20ea <__addsf3x+0x9a>
    20c2:	ff 0f       	add	r31, r31
    20c4:	bb 1f       	adc	r27, r27
    20c6:	66 1f       	adc	r22, r22
    20c8:	77 1f       	adc	r23, r23
    20ca:	88 1f       	adc	r24, r24
    20cc:	c2 f7       	brpl	.-16     	; 0x20be <__addsf3x+0x6e>
    20ce:	0e c0       	rjmp	.+28     	; 0x20ec <__addsf3x+0x9c>
    20d0:	ba 0f       	add	r27, r26
    20d2:	62 1f       	adc	r22, r18
    20d4:	73 1f       	adc	r23, r19
    20d6:	84 1f       	adc	r24, r20
    20d8:	48 f4       	brcc	.+18     	; 0x20ec <__addsf3x+0x9c>
    20da:	87 95       	ror	r24
    20dc:	77 95       	ror	r23
    20de:	67 95       	ror	r22
    20e0:	b7 95       	ror	r27
    20e2:	f7 95       	ror	r31
    20e4:	9e 3f       	cpi	r25, 0xFE	; 254
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <__addsf3x+0x9a>
    20e8:	b0 cf       	rjmp	.-160    	; 0x204a <__addsf3+0x28>
    20ea:	93 95       	inc	r25
    20ec:	88 0f       	add	r24, r24
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <__addsf3x+0xa2>
    20f0:	99 27       	eor	r25, r25
    20f2:	ee 0f       	add	r30, r30
    20f4:	97 95       	ror	r25
    20f6:	87 95       	ror	r24
    20f8:	08 95       	ret

000020fa <__divsf3>:
    20fa:	0e 94 91 10 	call	0x2122	; 0x2122 <__divsf3x>
    20fe:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__fp_round>
    2102:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fp_pscB>
    2106:	58 f0       	brcs	.+22     	; 0x211e <__divsf3+0x24>
    2108:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__fp_pscA>
    210c:	40 f0       	brcs	.+16     	; 0x211e <__divsf3+0x24>
    210e:	29 f4       	brne	.+10     	; 0x211a <__divsf3+0x20>
    2110:	5f 3f       	cpi	r21, 0xFF	; 255
    2112:	29 f0       	breq	.+10     	; 0x211e <__divsf3+0x24>
    2114:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_inf>
    2118:	51 11       	cpse	r21, r1
    211a:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_szero>
    211e:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__fp_nan>

00002122 <__divsf3x>:
    2122:	0e 94 83 11 	call	0x2306	; 0x2306 <__fp_split3>
    2126:	68 f3       	brcs	.-38     	; 0x2102 <__divsf3+0x8>

00002128 <__divsf3_pse>:
    2128:	99 23       	and	r25, r25
    212a:	b1 f3       	breq	.-20     	; 0x2118 <__divsf3+0x1e>
    212c:	55 23       	and	r21, r21
    212e:	91 f3       	breq	.-28     	; 0x2114 <__divsf3+0x1a>
    2130:	95 1b       	sub	r25, r21
    2132:	55 0b       	sbc	r21, r21
    2134:	bb 27       	eor	r27, r27
    2136:	aa 27       	eor	r26, r26
    2138:	62 17       	cp	r22, r18
    213a:	73 07       	cpc	r23, r19
    213c:	84 07       	cpc	r24, r20
    213e:	38 f0       	brcs	.+14     	; 0x214e <__divsf3_pse+0x26>
    2140:	9f 5f       	subi	r25, 0xFF	; 255
    2142:	5f 4f       	sbci	r21, 0xFF	; 255
    2144:	22 0f       	add	r18, r18
    2146:	33 1f       	adc	r19, r19
    2148:	44 1f       	adc	r20, r20
    214a:	aa 1f       	adc	r26, r26
    214c:	a9 f3       	breq	.-22     	; 0x2138 <__divsf3_pse+0x10>
    214e:	35 d0       	rcall	.+106    	; 0x21ba <__divsf3_pse+0x92>
    2150:	0e 2e       	mov	r0, r30
    2152:	3a f0       	brmi	.+14     	; 0x2162 <__divsf3_pse+0x3a>
    2154:	e0 e8       	ldi	r30, 0x80	; 128
    2156:	32 d0       	rcall	.+100    	; 0x21bc <__divsf3_pse+0x94>
    2158:	91 50       	subi	r25, 0x01	; 1
    215a:	50 40       	sbci	r21, 0x00	; 0
    215c:	e6 95       	lsr	r30
    215e:	00 1c       	adc	r0, r0
    2160:	ca f7       	brpl	.-14     	; 0x2154 <__divsf3_pse+0x2c>
    2162:	2b d0       	rcall	.+86     	; 0x21ba <__divsf3_pse+0x92>
    2164:	fe 2f       	mov	r31, r30
    2166:	29 d0       	rcall	.+82     	; 0x21ba <__divsf3_pse+0x92>
    2168:	66 0f       	add	r22, r22
    216a:	77 1f       	adc	r23, r23
    216c:	88 1f       	adc	r24, r24
    216e:	bb 1f       	adc	r27, r27
    2170:	26 17       	cp	r18, r22
    2172:	37 07       	cpc	r19, r23
    2174:	48 07       	cpc	r20, r24
    2176:	ab 07       	cpc	r26, r27
    2178:	b0 e8       	ldi	r27, 0x80	; 128
    217a:	09 f0       	breq	.+2      	; 0x217e <__divsf3_pse+0x56>
    217c:	bb 0b       	sbc	r27, r27
    217e:	80 2d       	mov	r24, r0
    2180:	bf 01       	movw	r22, r30
    2182:	ff 27       	eor	r31, r31
    2184:	93 58       	subi	r25, 0x83	; 131
    2186:	5f 4f       	sbci	r21, 0xFF	; 255
    2188:	3a f0       	brmi	.+14     	; 0x2198 <__divsf3_pse+0x70>
    218a:	9e 3f       	cpi	r25, 0xFE	; 254
    218c:	51 05       	cpc	r21, r1
    218e:	78 f0       	brcs	.+30     	; 0x21ae <__divsf3_pse+0x86>
    2190:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_inf>
    2194:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_szero>
    2198:	5f 3f       	cpi	r21, 0xFF	; 255
    219a:	e4 f3       	brlt	.-8      	; 0x2194 <__divsf3_pse+0x6c>
    219c:	98 3e       	cpi	r25, 0xE8	; 232
    219e:	d4 f3       	brlt	.-12     	; 0x2194 <__divsf3_pse+0x6c>
    21a0:	86 95       	lsr	r24
    21a2:	77 95       	ror	r23
    21a4:	67 95       	ror	r22
    21a6:	b7 95       	ror	r27
    21a8:	f7 95       	ror	r31
    21aa:	9f 5f       	subi	r25, 0xFF	; 255
    21ac:	c9 f7       	brne	.-14     	; 0x21a0 <__divsf3_pse+0x78>
    21ae:	88 0f       	add	r24, r24
    21b0:	91 1d       	adc	r25, r1
    21b2:	96 95       	lsr	r25
    21b4:	87 95       	ror	r24
    21b6:	97 f9       	bld	r25, 7
    21b8:	08 95       	ret
    21ba:	e1 e0       	ldi	r30, 0x01	; 1
    21bc:	66 0f       	add	r22, r22
    21be:	77 1f       	adc	r23, r23
    21c0:	88 1f       	adc	r24, r24
    21c2:	bb 1f       	adc	r27, r27
    21c4:	62 17       	cp	r22, r18
    21c6:	73 07       	cpc	r23, r19
    21c8:	84 07       	cpc	r24, r20
    21ca:	ba 07       	cpc	r27, r26
    21cc:	20 f0       	brcs	.+8      	; 0x21d6 <__divsf3_pse+0xae>
    21ce:	62 1b       	sub	r22, r18
    21d0:	73 0b       	sbc	r23, r19
    21d2:	84 0b       	sbc	r24, r20
    21d4:	ba 0b       	sbc	r27, r26
    21d6:	ee 1f       	adc	r30, r30
    21d8:	88 f7       	brcc	.-30     	; 0x21bc <__divsf3_pse+0x94>
    21da:	e0 95       	com	r30
    21dc:	08 95       	ret

000021de <__fixunssfsi>:
    21de:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fp_splitA>
    21e2:	88 f0       	brcs	.+34     	; 0x2206 <__fixunssfsi+0x28>
    21e4:	9f 57       	subi	r25, 0x7F	; 127
    21e6:	98 f0       	brcs	.+38     	; 0x220e <__fixunssfsi+0x30>
    21e8:	b9 2f       	mov	r27, r25
    21ea:	99 27       	eor	r25, r25
    21ec:	b7 51       	subi	r27, 0x17	; 23
    21ee:	b0 f0       	brcs	.+44     	; 0x221c <__fixunssfsi+0x3e>
    21f0:	e1 f0       	breq	.+56     	; 0x222a <__fixunssfsi+0x4c>
    21f2:	66 0f       	add	r22, r22
    21f4:	77 1f       	adc	r23, r23
    21f6:	88 1f       	adc	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	1a f0       	brmi	.+6      	; 0x2202 <__fixunssfsi+0x24>
    21fc:	ba 95       	dec	r27
    21fe:	c9 f7       	brne	.-14     	; 0x21f2 <__fixunssfsi+0x14>
    2200:	14 c0       	rjmp	.+40     	; 0x222a <__fixunssfsi+0x4c>
    2202:	b1 30       	cpi	r27, 0x01	; 1
    2204:	91 f0       	breq	.+36     	; 0x222a <__fixunssfsi+0x4c>
    2206:	0e 94 a5 11 	call	0x234a	; 0x234a <__fp_zero>
    220a:	b1 e0       	ldi	r27, 0x01	; 1
    220c:	08 95       	ret
    220e:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__fp_zero>
    2212:	67 2f       	mov	r22, r23
    2214:	78 2f       	mov	r23, r24
    2216:	88 27       	eor	r24, r24
    2218:	b8 5f       	subi	r27, 0xF8	; 248
    221a:	39 f0       	breq	.+14     	; 0x222a <__fixunssfsi+0x4c>
    221c:	b9 3f       	cpi	r27, 0xF9	; 249
    221e:	cc f3       	brlt	.-14     	; 0x2212 <__fixunssfsi+0x34>
    2220:	86 95       	lsr	r24
    2222:	77 95       	ror	r23
    2224:	67 95       	ror	r22
    2226:	b3 95       	inc	r27
    2228:	d9 f7       	brne	.-10     	; 0x2220 <__fixunssfsi+0x42>
    222a:	3e f4       	brtc	.+14     	; 0x223a <__fixunssfsi+0x5c>
    222c:	90 95       	com	r25
    222e:	80 95       	com	r24
    2230:	70 95       	com	r23
    2232:	61 95       	neg	r22
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	8f 4f       	sbci	r24, 0xFF	; 255
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	08 95       	ret

0000223c <__floatunsisf>:
    223c:	e8 94       	clt
    223e:	09 c0       	rjmp	.+18     	; 0x2252 <__floatsisf+0x12>

00002240 <__floatsisf>:
    2240:	97 fb       	bst	r25, 7
    2242:	3e f4       	brtc	.+14     	; 0x2252 <__floatsisf+0x12>
    2244:	90 95       	com	r25
    2246:	80 95       	com	r24
    2248:	70 95       	com	r23
    224a:	61 95       	neg	r22
    224c:	7f 4f       	sbci	r23, 0xFF	; 255
    224e:	8f 4f       	sbci	r24, 0xFF	; 255
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	99 23       	and	r25, r25
    2254:	a9 f0       	breq	.+42     	; 0x2280 <__floatsisf+0x40>
    2256:	f9 2f       	mov	r31, r25
    2258:	96 e9       	ldi	r25, 0x96	; 150
    225a:	bb 27       	eor	r27, r27
    225c:	93 95       	inc	r25
    225e:	f6 95       	lsr	r31
    2260:	87 95       	ror	r24
    2262:	77 95       	ror	r23
    2264:	67 95       	ror	r22
    2266:	b7 95       	ror	r27
    2268:	f1 11       	cpse	r31, r1
    226a:	f8 cf       	rjmp	.-16     	; 0x225c <__floatsisf+0x1c>
    226c:	fa f4       	brpl	.+62     	; 0x22ac <__floatsisf+0x6c>
    226e:	bb 0f       	add	r27, r27
    2270:	11 f4       	brne	.+4      	; 0x2276 <__floatsisf+0x36>
    2272:	60 ff       	sbrs	r22, 0
    2274:	1b c0       	rjmp	.+54     	; 0x22ac <__floatsisf+0x6c>
    2276:	6f 5f       	subi	r22, 0xFF	; 255
    2278:	7f 4f       	sbci	r23, 0xFF	; 255
    227a:	8f 4f       	sbci	r24, 0xFF	; 255
    227c:	9f 4f       	sbci	r25, 0xFF	; 255
    227e:	16 c0       	rjmp	.+44     	; 0x22ac <__floatsisf+0x6c>
    2280:	88 23       	and	r24, r24
    2282:	11 f0       	breq	.+4      	; 0x2288 <__floatsisf+0x48>
    2284:	96 e9       	ldi	r25, 0x96	; 150
    2286:	11 c0       	rjmp	.+34     	; 0x22aa <__floatsisf+0x6a>
    2288:	77 23       	and	r23, r23
    228a:	21 f0       	breq	.+8      	; 0x2294 <__floatsisf+0x54>
    228c:	9e e8       	ldi	r25, 0x8E	; 142
    228e:	87 2f       	mov	r24, r23
    2290:	76 2f       	mov	r23, r22
    2292:	05 c0       	rjmp	.+10     	; 0x229e <__floatsisf+0x5e>
    2294:	66 23       	and	r22, r22
    2296:	71 f0       	breq	.+28     	; 0x22b4 <__floatsisf+0x74>
    2298:	96 e8       	ldi	r25, 0x86	; 134
    229a:	86 2f       	mov	r24, r22
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	2a f0       	brmi	.+10     	; 0x22ac <__floatsisf+0x6c>
    22a2:	9a 95       	dec	r25
    22a4:	66 0f       	add	r22, r22
    22a6:	77 1f       	adc	r23, r23
    22a8:	88 1f       	adc	r24, r24
    22aa:	da f7       	brpl	.-10     	; 0x22a2 <__floatsisf+0x62>
    22ac:	88 0f       	add	r24, r24
    22ae:	96 95       	lsr	r25
    22b0:	87 95       	ror	r24
    22b2:	97 f9       	bld	r25, 7
    22b4:	08 95       	ret

000022b6 <__fp_inf>:
    22b6:	97 f9       	bld	r25, 7
    22b8:	9f 67       	ori	r25, 0x7F	; 127
    22ba:	80 e8       	ldi	r24, 0x80	; 128
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	08 95       	ret

000022c2 <__fp_nan>:
    22c2:	9f ef       	ldi	r25, 0xFF	; 255
    22c4:	80 ec       	ldi	r24, 0xC0	; 192
    22c6:	08 95       	ret

000022c8 <__fp_pscA>:
    22c8:	00 24       	eor	r0, r0
    22ca:	0a 94       	dec	r0
    22cc:	16 16       	cp	r1, r22
    22ce:	17 06       	cpc	r1, r23
    22d0:	18 06       	cpc	r1, r24
    22d2:	09 06       	cpc	r0, r25
    22d4:	08 95       	ret

000022d6 <__fp_pscB>:
    22d6:	00 24       	eor	r0, r0
    22d8:	0a 94       	dec	r0
    22da:	12 16       	cp	r1, r18
    22dc:	13 06       	cpc	r1, r19
    22de:	14 06       	cpc	r1, r20
    22e0:	05 06       	cpc	r0, r21
    22e2:	08 95       	ret

000022e4 <__fp_round>:
    22e4:	09 2e       	mov	r0, r25
    22e6:	03 94       	inc	r0
    22e8:	00 0c       	add	r0, r0
    22ea:	11 f4       	brne	.+4      	; 0x22f0 <__fp_round+0xc>
    22ec:	88 23       	and	r24, r24
    22ee:	52 f0       	brmi	.+20     	; 0x2304 <__fp_round+0x20>
    22f0:	bb 0f       	add	r27, r27
    22f2:	40 f4       	brcc	.+16     	; 0x2304 <__fp_round+0x20>
    22f4:	bf 2b       	or	r27, r31
    22f6:	11 f4       	brne	.+4      	; 0x22fc <__fp_round+0x18>
    22f8:	60 ff       	sbrs	r22, 0
    22fa:	04 c0       	rjmp	.+8      	; 0x2304 <__fp_round+0x20>
    22fc:	6f 5f       	subi	r22, 0xFF	; 255
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	8f 4f       	sbci	r24, 0xFF	; 255
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	08 95       	ret

00002306 <__fp_split3>:
    2306:	57 fd       	sbrc	r21, 7
    2308:	90 58       	subi	r25, 0x80	; 128
    230a:	44 0f       	add	r20, r20
    230c:	55 1f       	adc	r21, r21
    230e:	59 f0       	breq	.+22     	; 0x2326 <__fp_splitA+0x10>
    2310:	5f 3f       	cpi	r21, 0xFF	; 255
    2312:	71 f0       	breq	.+28     	; 0x2330 <__fp_splitA+0x1a>
    2314:	47 95       	ror	r20

00002316 <__fp_splitA>:
    2316:	88 0f       	add	r24, r24
    2318:	97 fb       	bst	r25, 7
    231a:	99 1f       	adc	r25, r25
    231c:	61 f0       	breq	.+24     	; 0x2336 <__fp_splitA+0x20>
    231e:	9f 3f       	cpi	r25, 0xFF	; 255
    2320:	79 f0       	breq	.+30     	; 0x2340 <__fp_splitA+0x2a>
    2322:	87 95       	ror	r24
    2324:	08 95       	ret
    2326:	12 16       	cp	r1, r18
    2328:	13 06       	cpc	r1, r19
    232a:	14 06       	cpc	r1, r20
    232c:	55 1f       	adc	r21, r21
    232e:	f2 cf       	rjmp	.-28     	; 0x2314 <__fp_split3+0xe>
    2330:	46 95       	lsr	r20
    2332:	f1 df       	rcall	.-30     	; 0x2316 <__fp_splitA>
    2334:	08 c0       	rjmp	.+16     	; 0x2346 <__fp_splitA+0x30>
    2336:	16 16       	cp	r1, r22
    2338:	17 06       	cpc	r1, r23
    233a:	18 06       	cpc	r1, r24
    233c:	99 1f       	adc	r25, r25
    233e:	f1 cf       	rjmp	.-30     	; 0x2322 <__fp_splitA+0xc>
    2340:	86 95       	lsr	r24
    2342:	71 05       	cpc	r23, r1
    2344:	61 05       	cpc	r22, r1
    2346:	08 94       	sec
    2348:	08 95       	ret

0000234a <__fp_zero>:
    234a:	e8 94       	clt

0000234c <__fp_szero>:
    234c:	bb 27       	eor	r27, r27
    234e:	66 27       	eor	r22, r22
    2350:	77 27       	eor	r23, r23
    2352:	cb 01       	movw	r24, r22
    2354:	97 f9       	bld	r25, 7
    2356:	08 95       	ret

00002358 <__mulsf3>:
    2358:	0e 94 bf 11 	call	0x237e	; 0x237e <__mulsf3x>
    235c:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__fp_round>
    2360:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__fp_pscA>
    2364:	38 f0       	brcs	.+14     	; 0x2374 <__mulsf3+0x1c>
    2366:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fp_pscB>
    236a:	20 f0       	brcs	.+8      	; 0x2374 <__mulsf3+0x1c>
    236c:	95 23       	and	r25, r21
    236e:	11 f0       	breq	.+4      	; 0x2374 <__mulsf3+0x1c>
    2370:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_inf>
    2374:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__fp_nan>
    2378:	11 24       	eor	r1, r1
    237a:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_szero>

0000237e <__mulsf3x>:
    237e:	0e 94 83 11 	call	0x2306	; 0x2306 <__fp_split3>
    2382:	70 f3       	brcs	.-36     	; 0x2360 <__mulsf3+0x8>

00002384 <__mulsf3_pse>:
    2384:	95 9f       	mul	r25, r21
    2386:	c1 f3       	breq	.-16     	; 0x2378 <__mulsf3+0x20>
    2388:	95 0f       	add	r25, r21
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	55 1f       	adc	r21, r21
    238e:	62 9f       	mul	r22, r18
    2390:	f0 01       	movw	r30, r0
    2392:	72 9f       	mul	r23, r18
    2394:	bb 27       	eor	r27, r27
    2396:	f0 0d       	add	r31, r0
    2398:	b1 1d       	adc	r27, r1
    239a:	63 9f       	mul	r22, r19
    239c:	aa 27       	eor	r26, r26
    239e:	f0 0d       	add	r31, r0
    23a0:	b1 1d       	adc	r27, r1
    23a2:	aa 1f       	adc	r26, r26
    23a4:	64 9f       	mul	r22, r20
    23a6:	66 27       	eor	r22, r22
    23a8:	b0 0d       	add	r27, r0
    23aa:	a1 1d       	adc	r26, r1
    23ac:	66 1f       	adc	r22, r22
    23ae:	82 9f       	mul	r24, r18
    23b0:	22 27       	eor	r18, r18
    23b2:	b0 0d       	add	r27, r0
    23b4:	a1 1d       	adc	r26, r1
    23b6:	62 1f       	adc	r22, r18
    23b8:	73 9f       	mul	r23, r19
    23ba:	b0 0d       	add	r27, r0
    23bc:	a1 1d       	adc	r26, r1
    23be:	62 1f       	adc	r22, r18
    23c0:	83 9f       	mul	r24, r19
    23c2:	a0 0d       	add	r26, r0
    23c4:	61 1d       	adc	r22, r1
    23c6:	22 1f       	adc	r18, r18
    23c8:	74 9f       	mul	r23, r20
    23ca:	33 27       	eor	r19, r19
    23cc:	a0 0d       	add	r26, r0
    23ce:	61 1d       	adc	r22, r1
    23d0:	23 1f       	adc	r18, r19
    23d2:	84 9f       	mul	r24, r20
    23d4:	60 0d       	add	r22, r0
    23d6:	21 1d       	adc	r18, r1
    23d8:	82 2f       	mov	r24, r18
    23da:	76 2f       	mov	r23, r22
    23dc:	6a 2f       	mov	r22, r26
    23de:	11 24       	eor	r1, r1
    23e0:	9f 57       	subi	r25, 0x7F	; 127
    23e2:	50 40       	sbci	r21, 0x00	; 0
    23e4:	9a f0       	brmi	.+38     	; 0x240c <__mulsf3_pse+0x88>
    23e6:	f1 f0       	breq	.+60     	; 0x2424 <__mulsf3_pse+0xa0>
    23e8:	88 23       	and	r24, r24
    23ea:	4a f0       	brmi	.+18     	; 0x23fe <__mulsf3_pse+0x7a>
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	bb 1f       	adc	r27, r27
    23f2:	66 1f       	adc	r22, r22
    23f4:	77 1f       	adc	r23, r23
    23f6:	88 1f       	adc	r24, r24
    23f8:	91 50       	subi	r25, 0x01	; 1
    23fa:	50 40       	sbci	r21, 0x00	; 0
    23fc:	a9 f7       	brne	.-22     	; 0x23e8 <__mulsf3_pse+0x64>
    23fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2400:	51 05       	cpc	r21, r1
    2402:	80 f0       	brcs	.+32     	; 0x2424 <__mulsf3_pse+0xa0>
    2404:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_inf>
    2408:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__fp_szero>
    240c:	5f 3f       	cpi	r21, 0xFF	; 255
    240e:	e4 f3       	brlt	.-8      	; 0x2408 <__mulsf3_pse+0x84>
    2410:	98 3e       	cpi	r25, 0xE8	; 232
    2412:	d4 f3       	brlt	.-12     	; 0x2408 <__mulsf3_pse+0x84>
    2414:	86 95       	lsr	r24
    2416:	77 95       	ror	r23
    2418:	67 95       	ror	r22
    241a:	b7 95       	ror	r27
    241c:	f7 95       	ror	r31
    241e:	e7 95       	ror	r30
    2420:	9f 5f       	subi	r25, 0xFF	; 255
    2422:	c1 f7       	brne	.-16     	; 0x2414 <__mulsf3_pse+0x90>
    2424:	fe 2b       	or	r31, r30
    2426:	88 0f       	add	r24, r24
    2428:	91 1d       	adc	r25, r1
    242a:	96 95       	lsr	r25
    242c:	87 95       	ror	r24
    242e:	97 f9       	bld	r25, 7
    2430:	08 95       	ret

00002432 <__divmodhi4>:
    2432:	97 fb       	bst	r25, 7
    2434:	07 2e       	mov	r0, r23
    2436:	16 f4       	brtc	.+4      	; 0x243c <__divmodhi4+0xa>
    2438:	00 94       	com	r0
    243a:	07 d0       	rcall	.+14     	; 0x244a <__divmodhi4_neg1>
    243c:	77 fd       	sbrc	r23, 7
    243e:	09 d0       	rcall	.+18     	; 0x2452 <__divmodhi4_neg2>
    2440:	0e 94 8e 12 	call	0x251c	; 0x251c <__udivmodhi4>
    2444:	07 fc       	sbrc	r0, 7
    2446:	05 d0       	rcall	.+10     	; 0x2452 <__divmodhi4_neg2>
    2448:	3e f4       	brtc	.+14     	; 0x2458 <__divmodhi4_exit>

0000244a <__divmodhi4_neg1>:
    244a:	90 95       	com	r25
    244c:	81 95       	neg	r24
    244e:	9f 4f       	sbci	r25, 0xFF	; 255
    2450:	08 95       	ret

00002452 <__divmodhi4_neg2>:
    2452:	70 95       	com	r23
    2454:	61 95       	neg	r22
    2456:	7f 4f       	sbci	r23, 0xFF	; 255

00002458 <__divmodhi4_exit>:
    2458:	08 95       	ret

0000245a <__udivmodsi4>:
    245a:	a1 e2       	ldi	r26, 0x21	; 33
    245c:	1a 2e       	mov	r1, r26
    245e:	aa 1b       	sub	r26, r26
    2460:	bb 1b       	sub	r27, r27
    2462:	fd 01       	movw	r30, r26
    2464:	0d c0       	rjmp	.+26     	; 0x2480 <__udivmodsi4_ep>

00002466 <__udivmodsi4_loop>:
    2466:	aa 1f       	adc	r26, r26
    2468:	bb 1f       	adc	r27, r27
    246a:	ee 1f       	adc	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	a2 17       	cp	r26, r18
    2470:	b3 07       	cpc	r27, r19
    2472:	e4 07       	cpc	r30, r20
    2474:	f5 07       	cpc	r31, r21
    2476:	20 f0       	brcs	.+8      	; 0x2480 <__udivmodsi4_ep>
    2478:	a2 1b       	sub	r26, r18
    247a:	b3 0b       	sbc	r27, r19
    247c:	e4 0b       	sbc	r30, r20
    247e:	f5 0b       	sbc	r31, r21

00002480 <__udivmodsi4_ep>:
    2480:	66 1f       	adc	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	88 1f       	adc	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	1a 94       	dec	r1
    248a:	69 f7       	brne	.-38     	; 0x2466 <__udivmodsi4_loop>
    248c:	60 95       	com	r22
    248e:	70 95       	com	r23
    2490:	80 95       	com	r24
    2492:	90 95       	com	r25
    2494:	9b 01       	movw	r18, r22
    2496:	ac 01       	movw	r20, r24
    2498:	bd 01       	movw	r22, r26
    249a:	cf 01       	movw	r24, r30
    249c:	08 95       	ret

0000249e <__divmodsi4>:
    249e:	05 2e       	mov	r0, r21
    24a0:	97 fb       	bst	r25, 7
    24a2:	1e f4       	brtc	.+6      	; 0x24aa <__divmodsi4+0xc>
    24a4:	00 94       	com	r0
    24a6:	0e 94 66 12 	call	0x24cc	; 0x24cc <__negsi2>
    24aa:	57 fd       	sbrc	r21, 7
    24ac:	07 d0       	rcall	.+14     	; 0x24bc <__divmodsi4_neg2>
    24ae:	0e 94 2d 12 	call	0x245a	; 0x245a <__udivmodsi4>
    24b2:	07 fc       	sbrc	r0, 7
    24b4:	03 d0       	rcall	.+6      	; 0x24bc <__divmodsi4_neg2>
    24b6:	4e f4       	brtc	.+18     	; 0x24ca <__divmodsi4_exit>
    24b8:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__negsi2>

000024bc <__divmodsi4_neg2>:
    24bc:	50 95       	com	r21
    24be:	40 95       	com	r20
    24c0:	30 95       	com	r19
    24c2:	21 95       	neg	r18
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	4f 4f       	sbci	r20, 0xFF	; 255
    24c8:	5f 4f       	sbci	r21, 0xFF	; 255

000024ca <__divmodsi4_exit>:
    24ca:	08 95       	ret

000024cc <__negsi2>:
    24cc:	90 95       	com	r25
    24ce:	80 95       	com	r24
    24d0:	70 95       	com	r23
    24d2:	61 95       	neg	r22
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	8f 4f       	sbci	r24, 0xFF	; 255
    24d8:	9f 4f       	sbci	r25, 0xFF	; 255
    24da:	08 95       	ret

000024dc <__tablejump2__>:
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	05 90       	lpm	r0, Z+
    24e2:	f4 91       	lpm	r31, Z
    24e4:	e0 2d       	mov	r30, r0
    24e6:	09 94       	ijmp

000024e8 <__umulhisi3>:
    24e8:	a2 9f       	mul	r26, r18
    24ea:	b0 01       	movw	r22, r0
    24ec:	b3 9f       	mul	r27, r19
    24ee:	c0 01       	movw	r24, r0
    24f0:	a3 9f       	mul	r26, r19
    24f2:	70 0d       	add	r23, r0
    24f4:	81 1d       	adc	r24, r1
    24f6:	11 24       	eor	r1, r1
    24f8:	91 1d       	adc	r25, r1
    24fa:	b2 9f       	mul	r27, r18
    24fc:	70 0d       	add	r23, r0
    24fe:	81 1d       	adc	r24, r1
    2500:	11 24       	eor	r1, r1
    2502:	91 1d       	adc	r25, r1
    2504:	08 95       	ret

00002506 <__muluhisi3>:
    2506:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__umulhisi3>
    250a:	a5 9f       	mul	r26, r21
    250c:	90 0d       	add	r25, r0
    250e:	b4 9f       	mul	r27, r20
    2510:	90 0d       	add	r25, r0
    2512:	a4 9f       	mul	r26, r20
    2514:	80 0d       	add	r24, r0
    2516:	91 1d       	adc	r25, r1
    2518:	11 24       	eor	r1, r1
    251a:	08 95       	ret

0000251c <__udivmodhi4>:
    251c:	aa 1b       	sub	r26, r26
    251e:	bb 1b       	sub	r27, r27
    2520:	51 e1       	ldi	r21, 0x11	; 17
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <__udivmodhi4_ep>

00002524 <__udivmodhi4_loop>:
    2524:	aa 1f       	adc	r26, r26
    2526:	bb 1f       	adc	r27, r27
    2528:	a6 17       	cp	r26, r22
    252a:	b7 07       	cpc	r27, r23
    252c:	10 f0       	brcs	.+4      	; 0x2532 <__udivmodhi4_ep>
    252e:	a6 1b       	sub	r26, r22
    2530:	b7 0b       	sbc	r27, r23

00002532 <__udivmodhi4_ep>:
    2532:	88 1f       	adc	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	5a 95       	dec	r21
    2538:	a9 f7       	brne	.-22     	; 0x2524 <__udivmodhi4_loop>
    253a:	80 95       	com	r24
    253c:	90 95       	com	r25
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	08 95       	ret

00002544 <_exit>:
    2544:	f8 94       	cli

00002546 <__stop_program>:
    2546:	ff cf       	rjmp	.-2      	; 0x2546 <__stop_program>
